<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Saml</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.Licensing.Saml.UltimateLicenseExceptionStatus">
            <summary>
            License check status.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:ComponentPro.Licensing.Saml.UltimateLicenseExceptionStatus.InvalidKey">
            <summary>
            Invalid license key.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Saml.UltimateLicenseExceptionStatus.InvalidDate">
            <summary>
            Expiry date is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Saml.UltimateLicenseExceptionStatus.LicenseExpired">
            <summary>
            License is expired.
            </summary>
        </member>
        <member name="T:ComponentPro.Licensing.Saml.UltimateLicenseException">
            <summary>Represents the License Exception.</summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:ComponentPro.Licensing.Saml.UltimateLicenseException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Saml.UltimateLicenseException"></see> class with the specified error message.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
        </member>
        <member name="M:ComponentPro.Licensing.Saml.UltimateLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Saml.UltimateLicenseException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes. </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that contains the information required to serialize the new <see cref="T:ComponentPro.Licensing.Saml.UltimateLicenseException"></see>. </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source and destination of the serialized stream associated with the new instance. </param>
        </member>
        <member name="M:ComponentPro.Licensing.Saml.UltimateLicenseException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Saml.UltimateLicenseException"></see> class with the specified error message and inner exception.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:ComponentPro.Licensing.Saml.UltimateLicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the _data needed to serialize the <see cref="T:ComponentPro.Licensing.Saml.UltimateLicenseException"></see>.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with _data. </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
        </member>
        <member name="P:ComponentPro.Licensing.Saml.UltimateLicenseException.Status">
            <summary>Gets the error code.</summary>
            <returns>An <see cref="T:ComponentPro.Licensing.Saml.UltimateLicenseExceptionStatus"></see> value that indicates the error that occurred.</returns>
        </member>
        <member name="T:ComponentPro.Licensing.Saml.UltimateLicenseManager">
            <summary>
            ComponentPro License Manager.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:ComponentPro.Licensing.Saml.UltimateLicenseManager.SetLicenseKey(System.String)">
            <summary>
            Sets the trial license key.
            </summary>
            <param name="licenseKey">The license key string.</param>
        </member>
        <member name="P:ComponentPro.Licensing.Saml.UltimateLicenseManager.RemainingDays">
            <summary>
            Gets remaining trial days.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.ActionNamespaces">
            <summary>
            Contains a set of available actions namespaces.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.ActionNamespaces.GetHeadPutPost">
            <summary>
            Get/head/put/post.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.ActionNamespaces.ReadWriteEditDeleteControl">
            <summary>
            Read/write/execute/delete/control.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.ActionNamespaces.ReadWriteEditDeleteControlwithNegation">
            <summary>
            Read/write/execute/delete/control with negation.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.ActionNamespaces.UnixFilePermissions">
            <summary>
            Unix file permissions.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Action">
            <summary>
            The Action element specifies an action on the specified resource for which permission is sought.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml.SamlObject">
            <summary>
            Represents base SAML object.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.SamlObject.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SAML object.
            </summary>
            <param name="element">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml.SamlObject.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
        </member>
        <member name="M:ComponentPro.Saml.SamlObject.OnCreateElement(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Creates an XML element.
            </summary>
            <param name="doc">The XML document to create an element with the specified <see cref="P:System.Xml.XmlNode.Prefix">Prefix</see>, 
            <see cref="P:System.Xml.XmlDocument.LocalName">LocalName</see>, and <see cref="P:System.Xml.XmlNode.NamespaceURI">NamespaceURI</see>.</param>
            <param name="prefix">The prefix of the new element (if any). String.Empty and null are equivalent.</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any). String.Empty and null are equivalent.</param>
        </member>
        <member name="M:ComponentPro.Saml.SamlObject.OnAppendChild(System.Xml.XmlElement,System.Xml.XmlNode)">
            <summary>
            Appends a child XML node.
            </summary>
            <param name="xmlParent">The XML element to add the specified node to the end of the list of child nodes, of this node.</param>
            <param name="newChild">The node to add. All the contents of the node to be added are moved into the specified location.</param>
            <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild"/> node.
            The <paramref name="newChild"/> is an ancestor of this node.</exception>
            <exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.This node is read-only.</exception>
        </member>
        <member name="M:ComponentPro.Saml.SamlObject.OnSetAttribute(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Sets XML node attribute.
            </summary>
            <param name="element">The XML element to set the value of the attribute with the specified name.</param>
            <param name="attrName">The name of the attribute to create or alter. 
            This is a qualified name. 
            If the name contains a colon it is parsed into prefix and local name components.</param>
            <param name="attrValue">The value to set for the attribute.</param>
            <exception cref="T:System.Xml.XmlException">The specified name contains an invalid character.</exception>
            <exception cref="T:System.ArgumentException">The node is read-only.</exception>
        </member>
        <member name="E:ComponentPro.Saml.SamlObject.SetAttribute">
            <summary>
            Occurs when the SAML object is about to set attribute name and value of an XML element.
            </summary>
            <seealso cref="T:ComponentPro.Saml.SetAttributeEventHandler"/>
        </member>
        <member name="E:ComponentPro.Saml.SamlObject.CreateElement">
            <summary>
            Occurs when the SAML object is about to create an XML element.
            </summary>
            <seealso cref="T:ComponentPro.Saml.CreateElementEventHandler"/>
        </member>
        <member name="E:ComponentPro.Saml.SamlObject.AppendChild">
            <summary>
            Occurs when the SAML object is about to add a node to the end of the list of child nodes, of a parent node.
            </summary>
            <seealso cref="T:ComponentPro.Saml.CreateElementEventHandler"/>
        </member>
        <member name="M:ComponentPro.Saml1.Action.#ctor">
            <summary>
            Initializes a new instance of the Action class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Action.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Action class from an XML element.
            </summary>
            <param name="xmlElement">The XML Element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Action.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Action class from the provided action namespace and value.
            </summary>
            <param name="actionNamespace">The Action Namespace.</param>
            <param name="actionValue">The Action Value.</param>
        </member>
        <member name="M:ComponentPro.Saml1.Action.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Action.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.Action.Namespace">
            <summary>
            Gets or sets the action namespace.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.ActionNamespaces"/>
        </member>
        <member name="P:ComponentPro.Saml1.Action.Value">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Advice">
            <summary>
            The Advice element contains any additional information that the SAML authority wishes to provide.
            This information MAY be ignored by applications without affecting either the semantics or the validity of the assertion.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Advice.#ctor">
            <summary>
            Initializes a new instance of the Advice class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Advice.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Advice class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Advice.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Advice.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.Advice.Advices">
            <summary>
            Gets or set a list of advices.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.Assertion"/>
            <seealso cref="T:ComponentPro.Saml1.AssertionIdReference"/>
        </member>
        <member name="T:ComponentPro.Saml1.Assertion">
            <summary>
            The Assertion element is of AssertionType complex type. This type specifies the basic information that is common to all assertions.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.SignableSaml1Object">
            <summary>
            Represents signable SAML v1.x object.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml.SignableSamlObject">
            <summary>
            Represents a signable SAML object.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml.SignableSamlObject"/> class.
            </summary>
            <param name="element">The xml element.</param>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.IsSigned">
            <summary>
            Returns a boolean value indicating whether the SAML object is signed.
            </summary>
            <returns>true if the SAML object is signed; otherwise is false.</returns>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.CreateSignedXml">
            <summary>
            Creates a signed XML object.
            </summary>
            <returns>The newly created signed XML object.</returns>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.GetXml">
            <summary>
            Converts the object into XML data.
            </summary>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.ToBase64String">
            <summary>
            Converts the response to a base 64 string. 
            </summary>
            <returns>The response as a base 64 string.</returns>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.ToBase64String(System.Text.Encoding)">
            <summary>
            Converts the current SAML object to a base 64 string.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>A base 64 string representing the SAML object.</returns>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.ExportSignature(System.Xml.XmlElement)">
            <summary>
            Exports the signature inside the signable SAML object to an XML element.
            </summary>
            <param name="xmlElement">The XML element that will contain the signature.</param>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.ExportSignature(System.Xml.XmlDocument)">
            <summary>
            Exports the signature inside the signable SAML object to an XML document.
            </summary>
            <param name="document">The XML document that will contain the signature.</param>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Add a generated XML signature using the specified signing key to the SAML request.
            </summary>
            <param name="x509Certificate">The certificate to include in the key info.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Add a generated XML signature using the specified signing key to the SAML request.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds a generated XML signature using the specified signing key to the SAML request. Key info, using the provided certificate will be included in the SAML signature.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <param name="x509Certificate">The certificate to include in the key info.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
            <summary>
            Adds a generated XML signature using the specified signing key to the SAML request. Key info, using the provided certificates will be included in the SAML signature.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <param name="x509Certificates">The list of certificates to include in the key info.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Adds a generated XML signature using the specified signing key and key info to the SAML request.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <param name="keyInfo">The key info to include in the XML signature.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfoX509Data)">
            <summary>
            Adds a generated XML signature using the specified signing key and key info data to the SAML request.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <param name="keyInfoX509Data">The X.509 data to include in the XML signature.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Adds a generated XML signature using the specified signing key to the SAML request.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list (can be null if no inclusive namespace prefix list specified).</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Adds a generated XML signature using the specified signing key to the SAML request. Key info, using the provided certificate will be included in the SAML signature.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <param name="x509Certificate">The certificate to include in the key info.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list (can be null if no inclusive namespace prefix list specified).</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String)">
            <summary>
            Adds a generated XML signature using the specified signing key to the SAML request. Key info, using the provided certificates will be included in the SAML signature.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <param name="x509Certificates">The list of X.509 certificate to include in the key info.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list (can be null if no inclusive namespace prefix list specified).</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfo,System.String)">
            <summary>
            Adds a generated XML signature using the specified signing key and key info to the SAML request.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <param name="keyInfo">The key info to include in the XML signature.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list (can be null if no inclusive namespace prefix list specified).</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Sign(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.KeyInfoX509Data,System.String)">
            <summary>
            Adds a generated XML signature using the specified signing key and key info data to the SAML request.
            </summary>
            <param name="signingKey">The signing key used to generate the XML signature.</param>
            <param name="keyInfoX509Data">The X.509 data to include in the XML signature.</param>
            <param name="inclusiveNamespacesPrefixList">The inclusive namespace prefix list (can be null if no inclusive namespace prefix list specified).</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while generating and adding the signature.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Validate">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The key info included with the signature is used to perform the verification.
            </remarks>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Validate(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied public key is used to perform the verification.
            </remarks>
            <param name="signingKey">The public key used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 certificate is used to perform the verification.
            </remarks>
            <param name="x509Certificate">The X.509 certificate used to perform the verification.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Validate(System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied key info is used to perform the verification.
            </remarks>
            <param name="keyInfo">The key info used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Validate(System.Security.Cryptography.Xml.KeyInfoX509Data)">
            <summary>
            Verifies the XML signature.
            </summary>
            <remarks>
            The supplied X.509 data is used to perform the verification.
            </remarks>
            <param name="keyInfoX509Data">The X.509 data used to perform the verification or <c>null</c> if none.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Validate(System.Xml.XmlElement)">
            <summary>
            Extracts the X.509 KeyInfo from the metadata XML and verifies the SAML XML signature.
            </summary>
            <remarks>
            The supplied Metadata is used to perform the verification.
            </remarks>
            <param name="metaData">The Metadata XML.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml.SignableSamlObject.Validate(ComponentPro.Saml2.Metadata.EntityDescriptor)">
            <summary>
            Extracts the X.509 KeyInfo data from the metadata object and verifies the SAML XML signature.
            </summary>
            <remarks>
            The supplied Metadata is used to perform the verification.
            </remarks>
            <param name="metaDataDescriptor">The Metadata Descriptor object.</param>
            <returns><c>true</c> if the XML signature is correct; otherwise <c>false</c>.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the signature verification fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml.SignableSamlObject.SignatureElement">
            <summary>
            Gets or sets the XML Signature that authenticates the request.
            </summary>
            <remarks>To remove the signature, simply set <see cref="P:ComponentPro.Saml.SignableSamlObject.SignatureElement"/> to a null reference.</remarks>
        </member>
        <member name="P:ComponentPro.Saml.SignableSamlObject.Id">
            <summary>
            Gets the object ID.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml.SignableSamlObject.DefaultInclusiveNamespacesPrefixList">
            <summary>
            Gets the default inclusive namespaces prefix list.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SignableSaml1Object.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.SignableSaml1Object"/> class from an XML element.
            </summary>
            <param name="element">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml1.SignableSaml1Object.ToSoap(ComponentPro.Saml.SoapVersion)">
            <summary>
            Creates a SOAP message containing a SAML protocol message.
            </summary>
            <returns>The SOAP message.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.SignableSaml1Object.ToSoap(System.Xml.XmlDocument,ComponentPro.Saml.SoapVersion)">
            <summary>
            Creates a SOAP message containing a SAML protocol message.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <param name="soapVersion">The SOAP version.</param>
            <returns>The SOAP message.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.SignableSaml1Object.SendSoapMessage(ComponentPro.Saml.SoapVersion,System.IO.Stream)">
            <summary>
            Sends SOAP message to the specified output stream.
            </summary>
            <param name="soapVersion">The </param>
            <param name="output">The output stream.</param>
        </member>
        <member name="P:ComponentPro.Saml1.SignableSaml1Object.DefaultInclusiveNamespacesPrefixList">
            <summary>
            Returns the default inclusive namespaces prefix list.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Assertion.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Assertion.#ctor">
            <summary>
            Initializes a new instance of the Assertion class.
            </summary>
            <remarks>
            Minor and major version number are set to 1.1, Id is set to a random SAML ID, and IssueInstant is set to DateTime.UtcNow.
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml1.Assertion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.Assertion"/> class from a base64 string.
            </summary>
            <param name="base64String">The base 64 string.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Assertion.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Assertion class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Assertion.IsValid(System.Xml.XmlElement)">
            <summary>
            Gets a boolean value inidicating whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Assertion.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.Advice">
            <summary>
            Gets or sets the additional information related to the assertion that assists processing in certain situations but which
            MAY be ignored by applications that do not support its use.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.Id">
            <summary>
            Gets or sets the identifier for this assertion. It is of type xsd:ID.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.Conditions">
            <summary>
            Gets or sets the conditions that MUST be taken into account in assessing the validity of the assertion.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.IssueInstant">
            <summary>
            The time instant of issue.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.Issuer">
            <summary>
            Gets or sets the SAML authority that created the assertion.
            </summary>
            <remarks>The name of the issuer is provided as a string. The
            issuer name SHOULD be unambiguous to the intended relying parties. SAML authorities may use an identifier such as a URI reference that is designed to be unambiguous regardless of context.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.MajorVersion">
            <summary>
            Gets or set the major version of this assertion.
            </summary>
            <value>
            The major version number. The default is 1.
            </value>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.MinorVersion">
            <summary>
            Gets or set the minor version of this assertion.
            </summary>
            <value>
            The major version number. The default is 1.
            </value>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.Statements">
            <summary>
            Gets or sets the statements.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.AuthenticationStatement"/>
            <seealso cref="T:ComponentPro.Saml1.AttributeStatement"/>
            <seealso cref="T:ComponentPro.Saml1.AuthorizationDecisionStatement"/>
            <seealso cref="P:ComponentPro.Saml1.Assertion.AuthenticationStatements"/>
            <seealso cref="P:ComponentPro.Saml1.Assertion.AttributeStatements"/>
            <seealso cref="P:ComponentPro.Saml1.Assertion.AuthorizationDecisionStatements"/>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.AttributeStatements">
            <summary>
            Gets a list of attribute statements.
            </summary>
            <seealso cref="P:ComponentPro.Saml1.Assertion.Statements"/>
            <seealso cref="T:ComponentPro.Saml1.AttributeStatement"/>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.AuthenticationStatements">
            <summary>
            Gets a list of authentication statements.
            </summary>
            <seealso cref="P:ComponentPro.Saml1.Assertion.Statements"/>
            <seealso cref="T:ComponentPro.Saml1.AuthenticationStatement"/>
        </member>
        <member name="P:ComponentPro.Saml1.Assertion.AuthorizationDecisionStatements">
            <summary>
            Gets a list of authorization decision statements.
            </summary>
            <seealso cref="P:ComponentPro.Saml1.Assertion.Statements"/>
            <seealso cref="T:ComponentPro.Saml1.AuthorizationDecisionStatement"/>
        </member>
        <member name="T:ComponentPro.Saml1.AssertionArtifact">
            <summary>
            The AssertionArtifact element is used to specify the assertion artifact that represents an
            assertion being requested. Its use is governed by the specific profile of SAML that is being used.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionArtifact.#ctor">
            <summary>
            Initializes a new instance of the AssertionArtifact class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionArtifact.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssertionArtifact class with the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionArtifact.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AssertionArtifact class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionArtifact.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionArtifact.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AssertionArtifact.Artifact">
            <summary>
            Gets or sets the assertion artifact.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.AssertionIdReference">
            <summary>
            The AssertionIdReference element makes a reference to a SAML assertion.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Evidentiary">
            <summary>
            Base class for element types that can constitute evidence within a <see cref="T:ComponentPro.Saml1.Evidence"/> object. 
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Evidentiary.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.Evidentiary"/> class.
            </summary>
            <param name="element">The XML element object.</param>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionIdReference.#ctor">
            <summary>
            Initializes a new instance of the AssertionIdReference class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionIdReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssertionIdReference class from a specified reference.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionIdReference.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AssertionIdReference class from a specified XMl element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionIdReference.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AssertionIdReference.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AssertionIdReference.Reference">
            <summary>
            Gets or sets the assertion reference.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Attribute">
            <summary>
            The Attribute element specifies an attribute of the subject.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Attribute.#ctor">
            <summary>
            Initializes a new instance of the Attribute class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Attribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Attribute class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Attribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Attribute with specified attribute name and namespace.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Attribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Attribute with specified attribute name, namespace and value.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Attribute.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the XML element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
            <exception cref="T:System.ArgumentNullException">
            xmlElement parameter is null reference.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Attribute.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.Attribute.Name">
            <summary>
            Gets or sets the attribute name.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Attribute.Namespace">
            <summary>
            Gets or sets the attribute namespace.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Attribute.AttributeValues">
            <summary>
            Gets or sets the attribute values.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.AttributeDesignator">
            <summary>
            The AttributeDesignator element identifies an attribute name within an attribute namespace. It
            has the AttributeDesignatorType complex type. It is used in an attribute query to request that attribute values within a specific namespace be returned.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeDesignator.#ctor">
            <summary>
            Initializes a new instance of the AttributeDesignator class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeDesignator.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AttributeDesignator class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeDesignator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the AttributeDesignator class with specified attribute name and namespace.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeDesignator.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
            <exception cref="T:System.ArgumentNullException">
            xmlElement parameter is null reference.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeDesignator.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AttributeDesignator.AttributeName">
            <summary>
            Gets or sets the attribute name.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.AttributeDesignator.AttributeNamespace">
            <summary>
            Gets or sets the attribute namespace.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.AttributeQuery">
            <summary>
            The AttributeQuery element is used to make the query �Return the requested attributes for this
            subject.� A successful response will be in the form of assertions containing attribute statements. 
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.SubjectQuery">
            <summary>
            Represents the SAML Subject Query object.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Query">
            <summary>
            Represents SAML Query.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Query.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.Query"/> object.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectQuery.#ctor">
            <summary>
            Initializes a new instance of the SubjectQuery class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectQuery.#ctor(ComponentPro.Saml1.Subject)">
            <summary>
            Initializes a new instance of the SubjectQuery class with the specified <see cref="P:ComponentPro.Saml1.SubjectQuery.Subject"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SubjectQuery class from an XML element.
            </summary>
            <param name="xmlElement">The subject query XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectQuery.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.SubjectQuery.Subject">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml1.SubjectQuery.Subject"/> object.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeQuery.#ctor">
            <summary>
            Initializes a new instance of the AttributeQuery class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AttributeQuery class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeQuery.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AttributeQuery.AttributeDesignators">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml1.AttributeDesignator"></see>.
            </summary>
            <remarks>
            Each AttributeDesignator element specifies an attribute whose value is to be returned. If no
            attributes are specified, it indicates that all attributes allowed by policy are requested.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml1.AttributeQuery.Resource">
            <summary>
            Gets or sets the resource.
            </summary>
            <remarks>
            If present, specifies that the attribute query is being made in order to evaluate a specific access
            request relating to the resource. The SAML authority MAY use the resource attribute to establish the 
            scope of the request. It is permitted for this attribute to have the value of the empty URI reference (""), 
            and the meaning is defined to be "the start of the current document", as specified by [RFC 2396].        
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml1.AttributeStatement">
            <summary>
            The AttributeStatement element describes a statement by the SAML authority asserting that the statement�s subject is associated with the specified attributes.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.SubjectStatement">
            <summary>
            The SubjectStatement element is an extension point that allows other assertion-based applications
            to reuse the SAML assertion framework. It contains a <see cref="P:ComponentPro.Saml1.SubjectStatement.Subject"/> element that allows a SAML authority
            to describe a subject.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Statement">
            <summary>
            Represents the SAML Statement object.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Statement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.Statement"/> class.
            </summary>
            <param name="element">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectStatement.#ctor">
            <summary>
            Initializes a new instance of the SubjectStatement class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectStatement.#ctor(ComponentPro.Saml1.Subject)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.SubjectStatement"/> class with the specified subject object.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.SubjectStatement"/> class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectStatement.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.SubjectStatement.Subject">
            <summary>
            Gets or sets the subject object.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeStatement.#ctor">
            <summary>
            Initializes a new instance of the AttributeStatement class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AttributeStatement class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeStatement.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeStatement.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AttributeStatement.Attributes">
            <summary>
            Gets or sets the list of attribute.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.AttributeValue">
            <summary>
            The AttributeValue element supplies the value of a specified attribute. It is of the anyType simple type, which allows any well-formed XML to appear as the content of the element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeValue.#ctor">
            <summary>
            Initializes a new instance of the AttributeValue class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AttributeValue class with the specified attribute value.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeValue.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeValue.ToString">
            <summary>
            Returns a System.String that represents the current object.
            </summary>
            <returns>A System.String that represents the current object.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AttributeValue.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:System.ArgumentNullException">attributeValueSerializer is null.</exception>
            <exception cref="T:ComponentPro.Saml.SamlException">attribute value serialization is failed.</exception>
        </member>
        <member name="P:ComponentPro.Saml1.AttributeValue.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Audience">
            <summary>
            A URI reference that identifies an intended audience. The URI reference MAY identify a document that describes the terms and conditions of audience membership.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Audience.#ctor">
            <summary>
            Initializes a new instance of the Audience.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Audience.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Audience with the specified audience value.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Audience.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Audience with from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Audience.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Audience.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.Audience.Value">
            <summary>
            Gets or sets the audience value.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.AudienceRestrictionCondition">
            <summary>
            The AudienceRestrictionCondition element specifies that the assertion is addressed to one or
            more specific audiences identified by Audience elements. Although a SAML relying party that is 
            outside the audiences specified is capable of drawing conclusions from an assertion, the SAML authority 
            explicitly makes no representation as to accuracy or trustworthiness to such a party.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Condition">
            <summary>
            Represents the SAML Condition.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Condition.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.Condition"/> class.
            </summary>
            <param name="element">The XML element object.</param>
        </member>
        <member name="M:ComponentPro.Saml1.AudienceRestrictionCondition.#ctor">
            <summary>
            Initializes a new instance of the AudienceRestrictionCondition class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AudienceRestrictionCondition.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AudienceRestrictionCondition class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AudienceRestrictionCondition.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AudienceRestrictionCondition.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AudienceRestrictionCondition.Audiences">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml1.Audience"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.AuthenticationQuery">
            <summary>
            The AuthenticationQuery element is used to make the query �What assertions containing
            authentication statements are available for this subject?� A successful response will be in the form of assertions containing authentication statements.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationQuery.#ctor">
            <summary>
            Initializes a new instance of the AuthenticationQuery class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthenticationQuery class with the specified authentication methhod.
            </summary>
            <param name="authenticationMethod">The authentication method.</param>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthenticationQuery class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationQuery.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AuthenticationQuery.AuthenticationMethod">
            <summary>
            Gets or sets the filter for possible responses. 
            </summary>
            <remarks>
            Such a query asks the question �What assertions
            containing authentication statements do you have for this subject with the supplied authentication method?�
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml1.AuthenticationMethodIdenfifiers">
            <summary>
            Defines the identifiers refer to SAML-specified authentication methods.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.HardwareToken">
            <summary>
            Hardware token.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.Kerberos">
            <summary>
            Kerberos.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.PgpPublicKey">
            <summary>
            PGP public key.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.SecureRemotePassword">
            <summary>
            Secure remote password.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.SpkiPublicKey">
            <summary>
            SPKI public key.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.SslTls">
            <summary>
            SSL/TLS certificate based client authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.X509PublicKey">
            <summary>
            X.509 public key.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.XkmsPublicKey">
            <summary>
            XKMS public key.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.AuthenticationMethodIdenfifiers.XmlDigitalSignature">
            <summary>
            XML digital signature.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.AuthenticationStatement">
            <summary>
            The AuthenticationStatement element describes a statement by the SAML authority asserting that the statement�s subject was authenticated by a particular means at a particular time.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationStatement.#ctor">
            <summary>
            Initializes a new instance of the AuthenticationStatement class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthenticationStatement class with the specified authentication method.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthenticationStatement class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationStatement.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the AuthenticationStatement class from the specified authentication Method and Instant time.
            </summary>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="authenticationInstant">The authentication instant.</param>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationStatement.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AuthenticationStatement.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
        </member>
        <member name="P:ComponentPro.Saml1.AuthenticationStatement.AuthenticationInstant">
            <summary>
            Gets or sets the time at which the authentication took place.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.AuthenticationStatement.AuthenticationMethod">
            <summary>
            Gets or sets the URI reference that specifies the type of authentication that took place.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.AuthenticationMethodIdenfifiers"/>
        </member>
        <member name="P:ComponentPro.Saml1.AuthenticationStatement.AuthorityBindings">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml1.AuthorityBinding"/> which indicates that additional information about the subject of the statement may be available.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.AuthenticationStatement.SubjectLocality">
            <summary>
            Gets or sets the DNS domain name and IP address for the system entity from which the subject was apparently authenticated.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.AuthorityBinding">
            <summary>
            The AuthorityBinding element MAY be used to indicate to a SAML relying party processing an
            <see cref="T:ComponentPro.Saml1.AuthenticationStatement"/> that a SAML authority may be available to provide additional information about 
            the subject of the statement. A single SAML authority may advertise its presence over multiple protocol 
            bindings, at multiple locations, and as more than one _kind of authority by sending multiple elements as needed.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorityBinding.#ctor">
            <summary>
            Initializes a new instance of the AuthorityBinding class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorityBinding.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthorityBinding class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorityBinding.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AuthorityBinding class with the specified 
            </summary>
            <param name="kind">The type of SAML protocol _queries to which the authority described by this element will respond.</param>
            <param name="location">A URI reference describing how to locate and communicate with the authority.</param>
            <param name="binding">A URI reference identifying the SAML protocol binding to use in communicating with the authority.</param>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorityBinding.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorityBinding.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorityBinding.Binding">
            <summary>
            Gets or sets the URI reference identifying the SAML protocol binding to use in communicating with the authority.
            </summary>
            <remarks>All SAML protocol bindings will have an assigned URI reference.</remarks>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorityBinding.Kind">
            <summary>
            Gets or sets the type of SAML protocol _queries to which the authority described by this element will respond.
            </summary>
            <remarks>The value is specified as an XML Schema QName. The AuthorityKind value is either the QName of the 
            desired SAML protocol query element or, in the case of an extension schema, the QName of the 
            SAML QueryAbstractType complex type or some extension type that was derived from it. In the 
            case of an extension schema, the authority will respond to all query elements of the specified type.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorityBinding.Location">
            <summary>
            Gets or sets the URI reference describing how to locate and communicate with the authority.
            </summary>
            <remarks>
            the exact syntax of which depends on the protocol binding in use. For example, a binding based on HTTP will be a web
            URL, while a binding based on SMTP might use the mailto: scheme.
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml1.AuthorizationDecisionQuery">
            <summary>
            The AuthorizationDecisionQuery element is used to make the query �Should these _actions on
            this resource be allowed for this subject, given this _evidence?� A successful response will be in the form 
            of assertions containing authorization decision statements.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorizationDecisionQuery.#ctor">
            <summary>
            Initializes a new instance of the AuthorizationDecisionQuery class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorizationDecisionQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthorizationDecisionQuery class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorizationDecisionQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorizationDecisionQuery.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorizationDecisionQuery.Actions">
            <summary>
            Gets or sets the actions for which authorization is requested.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorizationDecisionQuery.Evidence">
            <summary>
            Gets or sets a set of assertions that the SAML authority MAY rely on in making its authorization decision.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorizationDecisionQuery.Resource">
            <summary>
            Gets or sets the URI reference indicating the resource for which authorization is requested.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.AuthorizationDecisionStatement">
            <summary>
            The <see cref="T:ComponentPro.Saml1.AuthorizationDecisionStatement"/> element describes a statement by the SAML authority
            asserting that a request for access by the statement�s subject to the specified resource has resulted in the 
            specified authorization decision on the basis of some optionally specified _evidence.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorizationDecisionStatement.#ctor">
            <summary>
            Initializes a new instance of the AuthorizationDecisionStatement class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorizationDecisionStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthorizationDecisionStatement class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorizationDecisionStatement.#ctor(System.String,ComponentPro.Saml1.DecisionType)">
            <summary>
            Initializes a new instance of the AuthorizationDecisionStatement class with the specified resource and decision type.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorizationDecisionStatement.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.AuthorizationDecisionStatement.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorizationDecisionStatement.Actions">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml1.Action"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorizationDecisionStatement.Decision">
            <summary>
            Gets or sets the decision type.
            </summary>
            <remarks>The DecisionType simple type defines the possible values to be reported as the status of an authorization decision statement.</remarks>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorizationDecisionStatement.Evidence">
            <summary>
            Gets or sets a set of assertions that the SAML authority MAY rely on in making its authorization decision.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.AuthorizationDecisionStatement.Resource">
            <summary>
            Gets or sets the URI reference identifying the resource to which access authorization is sought.
            </summary>
            <remarks>
            It is permitted for this attribute to have the value of the empty URI reference (""), and the meaning is defined to be "the start of the current document", as specified by IETF RFC 2396 [RFC 2396].
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml1.Binding.Saml1ArtifactType0001">
            <summary>
            Represents the artifact type code 1.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml.Binding.SamlArtifact">
            <summary>
            Represents a base SAML Artifact for both SAML v1.x and SAML v2.x.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml.Binding.SamlArtifact"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml.Binding.SamlArtifact"/> class from the specified array of code bytes.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.ToByteArray">
            <summary>
            Converts the current SAML artifact to an array of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.ToBase64String">
            <summary>
            Converts the current SAML artifact to a base 64 string.
            </summary>
            <returns>A base 64 string representing the current SAML artifact.</returns>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.ToHexString">
            <summary>
            Converts the current SAML artifact to a hex string.
            </summary>
            <returns>A hex string representing the current SAML artifact.</returns>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.ToString">
            <summary>
            Converts the current SAML artifact to a base 64 string.
            </summary>
            <returns>A base 64 string representing the current SAML artifact.</returns>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.Equals(System.Object)">
            <summary>
            Equal operator.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if current object is equals to obj; otherwise is false.</returns>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.op_Equality(ComponentPro.Saml.Binding.SamlArtifact,ComponentPro.Saml.Binding.SamlArtifact)">
            <summary>
            Equal operator.
            </summary>
            <param name="x">The object to compare.</param>
            <param name="y">The object to compare with.</param>
            <returns>true if x is equals to y; otherwise is false.</returns>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.op_Inequality(ComponentPro.Saml.Binding.SamlArtifact,ComponentPro.Saml.Binding.SamlArtifact)">
            <summary>
            Not operator.
            </summary>
            <param name="x">The object to compare.</param>
            <param name="y">The object to compare with.</param>
            <returns>true if x is not equals to y; otherwise is false.</returns>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.GetHandle">
            <summary>
            Generates a 20 bytes handle from a random GUID.
            </summary>
            <returns>The assertion handle.</returns>
        </member>
        <member name="M:ComponentPro.Saml.Binding.SamlArtifact.GetSourceId(System.String)">
            <summary>
            Generates an assertion handle by computing the MD5-1 hash of the identification URL.
            </summary>
            <param name="identificationUrl">The identification URL.</param>
            <returns>The source identifier.</returns>
        </member>
        <member name="P:ComponentPro.Saml.Binding.SamlArtifact.TypeCode">
            <summary>
            Gets or sets the type code.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml.Binding.SamlArtifact.RemainingArtifact">
            <summary>
            Gets the remaining array of bytes.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Binding.Saml1ArtifactType0001.#ctor">
            <summary>
            Initializes a new instance of the ArtifactTypeCode1 class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Binding.Saml1ArtifactType0001.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the ArtifactTypeCode1 class with the specified source and handle.
            </summary>
            <param name="source">The source identifier.</param>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:ComponentPro.Saml1.Binding.Saml1ArtifactType0001.Parse(System.Byte[])">
            <summary>
            Creates a new instance of the ArtifactTypeCode1 class with the specified base 64 encoded artifact.
            </summary>
            <param name="artifact">The base 64 encoded artifact.</param>
        </member>
        <member name="P:ComponentPro.Saml1.Binding.Saml1ArtifactType0001.SourceId">
            <summary>
            Gets or sets the source identifier.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Binding.Saml1ArtifactType0001.Handle">
            <summary>
            Gets or sets handle.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Binding.Saml1ArtifactType0001.RemainingArtifact">
            <summary>
            Gets the remaining array of bytes.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Binding.Saml1ArtifactType0002">
            <summary>
            Represents the artifact type code 2.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.Binding.Saml1ArtifactType0002.SamlTypeCode">
            <summary>
            Represents the SAML type code.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Binding.Saml1ArtifactType0002.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.Binding.Saml1ArtifactType0002"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Binding.Saml1ArtifactType0002.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.Binding.Saml1ArtifactType0002"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Binding.Saml1ArtifactType0002.Parse(System.Byte[])">
            <summary>
            Initializes a new instance of the ArtifactTypeCode2 class with the specified base 64 artifact.
            </summary>
            <param name="artifact">The base 64 encoded artifact.</param>
        </member>
        <member name="P:ComponentPro.Saml1.Binding.Saml1ArtifactType0002.AssertionHandle">
            <summary>
            Gets or sets the 20 byte assertion handle.
            </summary>        
        </member>
        <member name="P:ComponentPro.Saml1.Binding.Saml1ArtifactType0002.SourceLocation">
            <summary>
            Gets or sets the source location URI. 
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Binding.Saml1ArtifactType0002.RemainingArtifact">
            <summary>
            Gets the remaining array of bytes.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Conditions">
            <summary>
            Represents a list of Condition.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Conditions.#ctor">
            <summary>
            Initializes a new instance of the Conditions class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Conditions.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the Conditions class with the specified time span.
            </summary>
            <param name="timeSpan">The timespan before and after now.</param>
        </member>
        <member name="M:ComponentPro.Saml1.Conditions.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Conditions class from an XML element.
            </summary>
            <param name="xmlElement">The conditions XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Conditions.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the Conditions class with the specified earliest time instant at which the assertion is valid and the time instant at which the assertion has expired.
            </summary>
            <param name="notBefore">Not before.</param>
            <param name="notOnOrAfter">Not on or after.</param>
        </member>
        <member name="M:ComponentPro.Saml1.Conditions.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Conditions.IsWithin">
            <summary>
            Indicates whether the current time is within the notBeforeTime and notOnOrAfterTime.
            </summary>
            <returns>True if within; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Conditions.IsWithin(System.TimeSpan)">
            <summary>
            Indicates whether the specified time is within the notBeforeTime and notOnOrAfterTime.
            </summary>
            <returns>True if within; otherwise is False.</returns>
            <remarks>
            To be within the time period, 
            not before - clock skew &gt; UTC now &gt;= not on or after + clock skew
            </remarks>
            <param name="clockSkew">The time span to allow for clock skew.</param>
            <returns><c>true</c> if within the time period; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Conditions.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.Conditions.ConditionsList">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml1.Condition"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Conditions.HasNotBefore">
            <summary>
            Indicates whether the Conditions has notBefore element.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Conditions.HasNotOnOrAfter">
            <summary>
            Indicates whether the Conditions has notOnOrAfter element.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Conditions.NotBefore">
            <summary>
            Gets or sets the earliest time instant at which the assertion is valid.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Conditions.NotOnOrAfter">
            <summary>
            Gets or sets the time instant at which the assertion has expired.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.ConfirmationMethods">
            <summary>
            Represents confirmation methods.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.ConfirmationMethods.Artifact">
            <summary>
            SAML artifact.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.ConfirmationMethods.Bearer">
            <summary>
            Bearer.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.ConfirmationMethods.HolderOfKey">
            <summary>
            Holder of key.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.ConfirmationMethods.SenderVouches">
            <summary>
            Sender vouches.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.ConfirmationMethod">
            <summary>
            A URI reference that identifies a protocol to be used to authenticate the subject. URI references
            identifying SAML-defined confirmation methods are currently defined with the SAML profiles in the 
            SAML bindings and profiles specification [SAMLBind]. Additional methods may be added by defining 
            new profiles or by private agreement. 
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.ConfirmationMethod.#ctor">
            <summary>
            Initializes a new instance of the ConfirmationMethod class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.ConfirmationMethod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConfirmationMethod class with the specified method.
            </summary>
            <param name="method">The confirmation method.</param>
            <seealso cref="T:ComponentPro.Saml1.ConfirmationMethods"/>
        </member>
        <member name="M:ComponentPro.Saml1.ConfirmationMethod.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ConfirmationMethod class from an XML element.
            </summary>
            <param name="xmlElement">The confirmation method XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.ConfirmationMethod.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.ConfirmationMethod.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.ConfirmationMethod.Method">
            <summary>
            Gets or sets the confirmation method.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.ConfirmationMethods"/>
        </member>
        <member name="T:ComponentPro.Saml1.DecisionType">
            <summary>
            The DecisionType simple type defines the possible values to be reported as the status of an authorization decision statement.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.DecisionType.Permit">
            <summary>
            The specified action is permitted.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.DecisionType.Deny">
            <summary>
            The specified action is denied.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.DecisionType.Indeterminate">
            <summary>
            The SAML authority cannot determine whether the specified action is permitted or denied.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.DoNotCacheCondition">
            <summary>
            Indicates that the assertion SHOULD be used immediately by the relying party and MUST NOT be
            retained for future use. A SAML authority SHOULD NOT include more than one 
            DoNotCacheCondition element within a Conditions element of an assertion. 
            </summary>
            <remarks>
            Note that no Relying Party implementation is required to perform caching. However, any that do so MUST observe this 
            condition. If multiple DoNotCacheCondition elements appear within a Conditions element, a 
            Relying Party MUST treat the multiple elements as though a single DoNotCacheCondition element 
            was specified. For the purposes of determining the validity of the Conditions element, the 
            DoNotCacheCondition is considered to always be valid. 
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml1.DoNotCacheCondition.#ctor">
            <summary>
            Initializes a new instance of the DoNotCacheCondition class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.DoNotCacheCondition.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the DoNotCacheCondition class from an XML element.
            </summary>
            <param name="xmlElement">The action XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.DoNotCacheCondition.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.DoNotCacheCondition.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml1.Evidence">
            <summary>
            The Evidence element contains an assertion or assertion reference that the SAML authority relied on
            in issuing the authorization decision.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Evidence.#ctor">
            <summary>
            Initializes a new instance of the Evidence class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Evidence.#ctor(ComponentPro.Saml1.Assertion)">
            <summary>
            Initializes a new instance of the Evidence class with the specified assertion.
            </summary>
            <param name="assertion">The assertion object.</param>
        </member>
        <member name="M:ComponentPro.Saml1.Evidence.#ctor(ComponentPro.Saml1.AssertionIdReference)">
            <summary>
            Initializes a new instance of the Evidence class with the specified assertion id reference.
            </summary>
            <param name="assertionIdReference">The Assertion ID Reference object.</param>
        </member>
        <member name="M:ComponentPro.Saml1.Evidence.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Evidence from an XML element.
            </summary>
            <param name="xmlElement">The action XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Evidence.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Evidence.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.Evidence.EvidenceList">
            <summary>
            Gets or sets the list of _evidence.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.Assertion"/>
            <seealso cref="T:ComponentPro.Saml1.AssertionIdReference"/>
        </member>
        <member name="T:ComponentPro.Saml1.NameIdentifierFormats">
            <summary>
            Name identifier format identifiers.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.NameIdentifierFormats.EmailAddress">
            <summary>
            Email address.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.NameIdentifierFormats.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.NameIdentifierFormats.WindowsDomainQualifiedName">
            <summary>
            Windows domain qualified name.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.NameIdentifierFormats.X509SubjectName">
            <summary>
            X.509 subject name.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.NameIdentifier">
            <summary>
            The NameIdentifier element specifies a subject by a combination of a name qualifier, a name,
            and a format. The name is provided as element content.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.NameIdentifier.#ctor">
            <summary>
            Initializes a new instance of the NameIdentifier class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.NameIdentifier.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the NameIdentifier class from an XML element.
            </summary>
            <param name="xmlElement">The name identifier XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.NameIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the NameIdentifier class from an XML element.
            </summary>
            <param name="format">A URI reference representing the format in which the NameIdentifier information is provided.</param>
            <param name="identifierValue">The identifier value.</param>
            <param name="nameQualifier">The security or administrative domain that qualifies the name of the subject.</param>
        </member>
        <member name="M:ComponentPro.Saml1.NameIdentifier.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.NameIdentifier.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.NameIdentifier.ToString">
            <summary>
            Returns a string representing this object.
            </summary>
            <returns>The string representing this object.</returns>
        </member>
        <member name="P:ComponentPro.Saml1.NameIdentifier.Format">
            <summary>
            Gets or sets the URI reference representing the format in which the NameIdentifier information is provided.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.NameIdentifierFormats"/>
        </member>
        <member name="P:ComponentPro.Saml1.NameIdentifier.Qualifier">
            <summary>
            Gets or sets the security or administrative domain that qualifies the name of the subject.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.NameIdentifier.Value">
            <summary>
            Gets or sets the identifier value.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Request">
            <summary>
            The Request element specifies a SAML request. It provides either a query or a request for a specific
            assertion identified by <see cref="T:ComponentPro.Saml1.AssertionIdReference"/> or <see cref="T:ComponentPro.Saml1.AssertionArtifact"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Request.#ctor">
            <summary>
            Initializes a new instance of the Request class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Request.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.Request"/> class from a base64 string.
            </summary>
            <param name="base64String">The base 64 string.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Request.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.Request"/> class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Request.Create(System.IO.Stream,ComponentPro.Saml.SoapVersion)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml1.Request"/> object from the specified request stream and SOAP version. This method is used to process a SAML request.
            </summary>
            <param name="requestStream">The request stream.</param>
            <param name="soapVersion">The SOAP version.</param>
            <returns>The created Request object.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Request.Create(System.Web.HttpRequest,ComponentPro.Saml.SoapVersion)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml1.Request"/> object from the specified HTTP Request object and SOAP version. This method is used to process a SAML request.
            </summary>
            <param name="httpRequest">The HTTP request object.</param>
            <param name="soapVersion">The SOAP version.</param>
            <returns>The created Request object.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Request.#ctor(System.Xml.XmlElement,ComponentPro.Saml.SoapVersion)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml1.Request"/> object from the specified SOAP message and SOAP version. This method is used to process a SAML request.
            </summary>
            <param name="soapMessage">The SOAP message.</param>
            <param name="soapVersion">The SOAP version.</param>
        </member>
        <member name="M:ComponentPro.Saml1.Request.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Request.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Request.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Request.Send(System.Net.WebRequest,ComponentPro.Saml.SoapVersion)">
            <summary>
            Sends the SAML request.
            </summary>
            <param name="webRequest">The WebRequest object is used to send the SAML request.</param>
            <param name="soapVersion">The SOAP version.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Request.Send(System.String,ComponentPro.Saml.SoapVersion)">
            <summary>
            Sends the SAML request.
            </summary>
            <param name="url">The destination URL.</param>
            <param name="soapVersion">The SOAP version.</param>
            <returns>The SAML response.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.Request.Queries">
            <summary>
            Gets or sets the extension point that allows extension schemas to define new types of query.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.AuthenticationQuery"/>
            <seealso cref="T:ComponentPro.Saml1.AttributeQuery"/>
            <seealso cref="T:ComponentPro.Saml1.AuthorizationDecisionQuery"/>
            <seealso cref="T:ComponentPro.Saml1.AssertionIdReference"/>
            <seealso cref="T:ComponentPro.Saml1.AssertionArtifact"/>
        </member>
        <member name="P:ComponentPro.Saml1.Request.IssueInstant">
            <summary>
            Gets or sets the time instant of issue of the request. The time value is encoded in UTC
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Request.MajorVersion">
            <summary>
            Gets or sets the major version of this request.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Request.MinorVersion">
            <summary>
            Gets or sets the minor version of this request.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Request.Id">
            <summary>
            Gets or sets the identifier for the request.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Request.RespondWiths">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml1.RespondWith"/>.
            </summary>
            <remarks>
            Each <see cref="T:ComponentPro.Saml1.RespondWith"/> element specifies a type of response that is acceptable to the requester.
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml1.RespondWith">
            <summary>
            The RespondWith element specifies the type of statement the SAML relying party wants from the SAML authority.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.RespondWith.#ctor">
            <summary>
            Initializes a new instance of the RespondWith class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.RespondWith.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RespondWith class with the specified respondWithValue.
            </summary>
            <param name="respondWithValue">The response with value.</param>
        </member>
        <member name="M:ComponentPro.Saml1.RespondWith.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the RespondWith class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.RespondWith.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.RespondWith.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.RespondWith.Value">
            <summary>
            Gets or sets the respond with value.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Response">
            <summary>
            The Response element specifies the status of the corresponding SAML request and a list of zero or more assertions that answer the request.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Response.#ctor">
            <summary>
            Initializes a new instance of the Response class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Response.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Response class with the specified base64.
            </summary>
            <param name="base64String">The base 64 string.</param>
        </member>
        <member name="M:ComponentPro.Saml1.Response.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Response class from an XML element.
            </summary>
            <param name="xmlElement">The response XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Response.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Response.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Response.GetAssertions">
            <summary>
            Returns all unsigned assertions.
            </summary>
            <returns>The assertions.</returns>
            <seealso cref="P:ComponentPro.Saml1.Response.Assertions"/>
            <seealso cref="P:ComponentPro.Saml1.Response.SignedAssertions"/>
            <seealso cref="T:ComponentPro.Saml1.Assertion"/>
        </member>
        <member name="M:ComponentPro.Saml1.Response.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="P:ComponentPro.Saml1.Response.Assertions">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml1.Assertion"/>.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.Assertion"/>
            <seealso cref="P:ComponentPro.Saml1.Response.Assertions"/>
            <seealso cref="P:ComponentPro.Saml1.Response.SignedAssertions"/>
        </member>
        <member name="P:ComponentPro.Saml1.Response.SignedAssertions">
            <summary>
            Gets all signed assertions.
            </summary>
            <returns>The signed assertions.</returns>
        </member>
        <member name="P:ComponentPro.Saml1.Response.Status">
            <summary>
            Gets or sets the code representing the status of the corresponding request.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Response.InResponseTo">
            <summary>
            Gets or sets the reference to the identifier of the request to which the response corresponds.
            </summary>
            <remarks>
            If the response is not generated in response to a request, or if the RequestID attribute value of a request cannot be 
            determined (because the request is malformed), then this attribute MUST NOT be present. Otherwise, it MUST be present and its value MUST match the value of the corresponding 
            RequestID attribute value.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml1.Response.IssueInstant">
            <summary>
            Gets ot sets the time instant of issue of the response. The time value is encoded in UTC.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Response.MajorVersion">
            <summary>
            Gets or sets the major version of this response.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Response.MinorVersion">
            <summary>
            Gets or sets the minor version of this response.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Response.Recipient">
            <summary>
            Gets or sets the intended recipient of this response.
            </summary>
            <remarks>
            This is useful to prevent malicious forwarding of responses to unintended recipients, a protection that is required by some use profiles. It is set by the generator of 
            the response to a URI reference that identifies the intended recipient. If present, the actual recipient MUST check that the URI reference identifies the recipient or a resource managed by the recipient. If 
            it does not, the response MUST be discarded.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml1.Response.Id">
            <summary>
            Gets or sets the identifier for the response.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Action">
            <summary>
            The Action element specifies an action on the specified resource for which permission is sought.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Action.#ctor">
            <summary>
            Initializes a new instance of the Action class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Action.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Action class from an XML element.
            </summary>
            <param name="xmlElement">The XML Element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Action.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Action class from the provided action namespace and value.
            </summary>
            <param name="actionNamespace">The Action Namespace.</param>
            <param name="actionValue">The Action Value.</param>
            <seealso cref="T:ComponentPro.Saml2.SamlActionNamespace"/>
            <seealso cref="T:ComponentPro.Saml2.SamlAction"/>
        </member>
        <member name="M:ComponentPro.Saml2.Action.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Action.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Action.Namespace">
            <summary>
            Gets or sets the namespace scope of the specified action.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlActionNamespace"/>
        </member>
        <member name="P:ComponentPro.Saml2.Action.Uri">
            <summary>
            Gets or sets the URI of the action to be performed.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlAction"/>
        </member>
        <member name="T:ComponentPro.Saml2.Advice">
            <summary>
            The Advice element contains any additional information that the SAML authority wishes to provide.
            This information MAY be ignored by applications without affecting either the semantics or the validity of the assertion.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Advice.#ctor">
            <summary>
            Initializes a new instance of the Advice class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Advice.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Advice class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Advice.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Advice.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Advice.Children">
            <summary>
            Gets the list of all child elements attached to this advice.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.AssertionIdRef"/>
            <seealso cref="T:ComponentPro.Saml2.AssertionUriRef"/>
            <seealso cref="T:ComponentPro.Saml2.Assertion"/>
            <seealso cref="T:ComponentPro.Saml2.EncryptedAssertion"/>
        </member>
        <member name="P:ComponentPro.Saml2.Advice.AssertionIdReferences">
            <summary>
            Gets the list of AssertionID references used as advice.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Advice.Assertions">
            <summary>
            Gets the list of Assertions used as advice.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Advice.AssertionUriRefs">
            <summary>
            Gets the list of AssertionUriRefs used as advice.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Advice.EncryptedAssertions">
            <summary>
            Gets the list of EncryptedAssertions used as advice.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Artifact">
            <summary>
            Represent the artifact.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Artifact.#ctor">
            <summary>
            Initializes a new instance of the Artifact class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Artifact.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Artifact class with the specified artifact value.
            </summary>
            <param name="artifactValue">The artifact value.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Artifact.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Artifact class from an XML.
            </summary>
            <param name="xmlElement">The Artifact XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Artifact.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Artifact.ToString">
            <summary>
            Returns the artifact value.
            </summary>
            <returns>The artifact value.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Artifact.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Artifact.ArtifactValue">
            <summary>
            Gets or sets the artifact value.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.ArtifactResolve">
            <summary>
            The ArtifactResolve message is used to request that a SAML protocol message be returned in an 
            ArtifactResponse message by specifying an artifact that represents the SAML protocol message.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.RequestAbstractType">
            <summary>
            Represents the RequestAbstractType element.
            </summary>
            <remarks>
            All SAML requests are of types that are derived from the abstract RequestAbstractType complex type.
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml2.SignableSaml2Object">
            <summary>
            Represents Signable SAML2 object.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SignableSaml2Object.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.SignableSaml2Object"/> class.
            </summary>
            <param name="element">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.SignableSaml2Object.DefaultInclusiveNamespacesPrefixList">
            <summary>
            Returns the default inclusive namespaces prefix list.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.RequestAbstractType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.RequestAbstractType"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.RequestAbstractType.#ctor(System.Xml.XmlElement)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.Saml2.RequestAbstractType"/> class from the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.RequestAbstractType.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.RequestAbstractType.Consent">
            <summary>
            Gets or sets the Consent.
            </summary>
            <remarks>
            Indicates whether or not (and under what conditions) consent has been obtained from a principal in the sending of this request.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.RequestAbstractType.Destination">
            <summary>
            Gets or sets the URI reference indicating the address to which this request has been sent.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.RequestAbstractType.Extensions">
            <summary>
            Gets or sets the protocol message extension elements that are agreed on between the communicating parties.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.RequestAbstractType.Id">
            <summary>
            Gets or sets the identifier for the request.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.RequestAbstractType.IssueInstant">
            <summary>
            Gets or sets the time instant of issue of the request. The time value is encoded in UTC.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.RequestAbstractType.Issuer">
            <summary>
            Gets or sets the entity that generated the request message.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.RequestAbstractType.Version">
            <summary>
            Gets or sets the version of this request.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResolve.#ctor">
            <summary>
            Initializes a new instance of the ArtifactResolve class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResolve.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResolve.Create(System.Web.HttpRequest)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.ArtifactResolve"/> from the specified HTTP Request.
            </summary>
            <param name="httpRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResolve.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ArtifactResolve class from an XML.
            </summary>
            <param name="xmlElement">The ArtifactResolve XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResolve.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResolve.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResolve.ToString">
            <summary>
            Returns a System.String that represents the current object.
            </summary>
            <returns>A System.String that represents the current object.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.ArtifactResolve.Artifact">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.ArtifactResolve.Artifact"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.ArtifactResponse">
            <summary>
            Represents the Artifact Response.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.StatusResponseType">
            <summary>
            Represents the Status Response type.
            </summary>
            <remarks>
            All SAML responses are of types that are derived from the StatusResponseType complex type.
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml2.StatusResponseType.#ctor">
            <summary>
            Initializes a new instance of the StatusResponseType class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.StatusResponseType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the StatusResponseType class from an XML.
            </summary>
            <param name="xmlElement">The StatusResponseType XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.StatusResponseType.IsSuccess">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Saml2.StatusResponseType.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.StatusResponseType.Consent">
            <summary>
            Gets or sets the consent.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.StatusResponseType.Destination">
            <summary>
            Gets or sets the URI reference indicating the address to which this response has been sent.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.StatusResponseType.Extensions">
            <summary>
            Gets or sets the extensions.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.StatusResponseType.Id">
            <summary>
            Gets or sets the identifier for the response.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.StatusResponseType.InResponseTo">
            <summary>
            Gets or sets the reference to the identifier of the request to which the response corresponds.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.StatusResponseType.IssueInstant">
            <summary>
            Gets or sets the time instant of issue of the response. The time value is encoded in UTC.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.StatusResponseType.Issuer">
            <summary>
            Gets or sets the entity that generated the response message.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.StatusResponseType.Status">
            <summary>
            Gets or sets the code representing the status of the corresponding request.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.StatusResponseType.Version">
            <summary>
            Gets or sets the version of this response.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResponse.#ctor">
            <summary>
            Initializes a new instance of the ArtifactResponse class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResponse.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResponse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ArtifactResponse class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResponse.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResponse.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResponse.Send(System.Web.HttpResponse)">
            <summary>
            Converts the current Artifact Response object to SOAP XML Message and send to the specified HttpResponse object.
            </summary>
            <param name="httpResponse">The HTTP Response object.</param>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResponse.SendSamlMessageReceiveAftifactResponse(System.String,ComponentPro.Saml.SignableSamlObject)">
            <summary>
            Sends a generated SAML SOAP Message and receive an Artifact Response message.
            </summary>
            <param name="destinationUrl">The destination Url.</param>
            <param name="samlMessage">The SAML message object.</param>
            <returns>The <see cref="T:ComponentPro.Saml2.ArtifactResponse"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResponse.SendSamlMessageReceiveAftifactResponse(System.Net.WebRequest,ComponentPro.Saml.SignableSamlObject)">
            <summary>
            Sends a generated SAML SOAP Message and receive an Artifact Response message.
            </summary>
            <param name="webRequest">The Web Request object which will be used to send the SAML SOAP Message.</param>
            <param name="samlMessage">The SAML message object.</param>
            <returns>The <see cref="T:ComponentPro.Saml2.ArtifactResponse"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ArtifactResponse.ToString">
            <summary>
            Returns a System.String that represents the current object.
            </summary>
            <returns>A System.String that represents the current object.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.ArtifactResponse.Message">
            <summary>
            Gets or sets the SAML message.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Assertion">
            <summary>
            The Assertion element is of AssertionType complex type. This type specifies the basic information that is common to all assertions.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.#ctor">
            <summary>
            Initializes a new instance of the Assertion class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Assertion class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Assertion class from an XML string.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.Select(System.Xml.XmlElement)">
            <summary>
            Selects and returns the list of SAML assertion XML elements contained within the specified XML.
            </summary>
            <param name="xmlElement">The XML in which to search for SAML assertions XML elements.</param>
            <returns>The list of SAML assertion XML elements contained within the specified XML.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.GetAttributes(System.String)">
            <summary>
            Returns all unencrypted attributes with the specified name.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>The matching unencrypted attributes.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.GetAttributeValue(System.String)">
            <summary>
            Returns the value of the unencrypted attribute with the specified name.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>The attribute value or null if none.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value by adding an attribute statement containing an attribute with the specified name and value. 
            </summary>
            <param name="name">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Assertion.SetAttributeValue(System.String,System.String,System.String)">
            <summary>
            Sets the attribute value by adding an attribute statement containing an attribute with the specified name and value. 
            </summary>
            <param name="name">The attribute name.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.AttributeStatements">
            <summary>
            Gets a list of attribute statements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.AuthenticationStatements">
            <summary>
            Gets a list of authentication statements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.AuthorizationDecisionStatements">
            <summary>
            Gets a list of authorization decision statements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.Advice">
            <summary>
            Gets or sets the additional information related to the assertion that assists processing in certain situations but which
            MAY be ignored by applications that do not support its use.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.Conditions">
            <summary>
            Gets or sets the conditions that MUST be taken into account in assessing the validity of the assertion.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.Id">
            <summary>
            Gets or sets the identifier for this assertion. It is of type xsd:ID.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.IssueInstant">
            <summary>
            The time instant of issue.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.Issuer">
            <summary>
            Gets or sets the SAML authority that created the assertion.
            </summary>
            <remarks>The name of the issuer is provided as a string. The
            issuer name SHOULD be unambiguous to the intended relying parties. SAML authorities may use an identifier such as a URI reference that is designed to be unambiguous regardless of context.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.Statements">
            <summary>
            Gets or sets the statements.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.AuthnStatement" />
            <seealso cref="T:ComponentPro.Saml2.AuthzDecisionStatement" />
            <seealso cref="T:ComponentPro.Saml2.AttributeStatement" />
            <seealso cref="P:ComponentPro.Saml2.Assertion.AuthenticationStatements" />
            <seealso cref="P:ComponentPro.Saml2.Assertion.AuthorizationDecisionStatements" />
            <seealso cref="P:ComponentPro.Saml2.Assertion.AttributeStatements" />
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.Subject">
            <summary>
            Gets or sets the subject of this assertion.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Assertion.Version">
            <summary>
            Gets or set the version of this assertion.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AssertionIdRef">
            <summary>
            The AssertionIDRef element makes a reference to a SAML assertion by its unique identifier. 
            The specific authority who issued the assertion or from whom the assertion can be 
            obtained is not specified aspart of the reference.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRef.#ctor">
            <summary>
            Initializes a new instance of the AssertionIdRef class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssertionIdRef class with the specified reference.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AssertionIdRef class from an XML element.
            </summary>
            <param name="xmlElement">The XMl element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRef.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRef.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AssertionIdRef.Reference">
            <summary>
            Gets or sets the reference.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AssertionIdRequest">
            <summary>
            Represents the AssertionIdRequest.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRequest.#ctor">
            <summary>
            Initializes a new instance of the AssertionIdRequest class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AssertionIdRequest class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRequest.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRequest.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionIdRequest.ToString">
            <summary>
            Returns a System.String that represents the current object.
            </summary>
            <returns>A System.String that represents the current object.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.AssertionIdRequest.AssertionIdRefs">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.AssertionIdRef"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AssertionUriRef">
            <summary>
            The AssertionURIRef element makes a reference to a SAML assertion by URI reference. The URI
            reference MAY be used to retrieve the corresponding assertion in a manner specific to the URI reference.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Evidentiary">
            <summary>
            Base class for element types that can constitute evidence within a <see cref="T:ComponentPro.Saml2.Evidence"/> object. 
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Evidentiary.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Evidentiary"/> class.
            </summary>
            <param name="element">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionUriRef.#ctor">
            <summary>
            Initializes a new instance of the AssertionUriRef class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionUriRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssertionUriRef class with the specified reference.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionUriRef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AssertionUriRef class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionUriRef.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AssertionUriRef.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AssertionUriRef.AssertionUri">
            <summary>
            The assertion uri reference.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AbstractAttribute">
            <summary>
            Represents an attribute.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AbstractAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.AbstractAttribute"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AbstractAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.AbstractAttribute"/> class from the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AbstractAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.AbstractAttribute"/> class.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="nameFormat">Name format.</param>
            <param name="friendlyName">Friendly name.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AbstractAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.AbstractAttribute"/> class.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="nameFormat">Name format.</param>
            <param name="friendlyName">Friendly name.</param>
            <param name="attributeValue">The Attribute Value.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AbstractAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.AbstractAttribute"/> class.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="nameFormat">Name format.</param>
            <param name="friendlyName">Friendly name.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="attributeValue">The Attribute Value.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AbstractAttribute.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.AbstractAttribute.FriendlyName">
            <summary>
            Gets or sets the string that provides a more human-readable form of the attribute's name, which may be useful in cases in which the actual Name is complex or opaque, such as an OID or a UUID.
            </summary>
            <remarks>
            This attribute's value MUST NOT be used as a basis for formally identifying SAML attributes.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.AbstractAttribute.Name">
            <summary>
            Gets or sets the attribute's name.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AbstractAttribute.NameFormat">
            <summary>
            Gets or sets the the URI reference representing the classification of the attribute name for purposes of interpreting the name.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AbstractAttribute.Values">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml2.AttributeValue"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Attribute">
            <summary>
            The Attribute element identifies an attribute by name and optionally includes its value(s). It has the
            AttributeType complex type. It is used within an attribute statement to express particular attributes and
            values associated with an assertion subject. It is also used in an attribute query to request that the values of specific SAML attributes be returned.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Attribute.#ctor">
            <summary>
            Initializes a new instance of the Attribute class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Attribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Attribute class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Attribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLAttribute</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <seealso cref="T:ComponentPro.Saml2.SamlAttributeNameFormat"/>
        </member>
        <member name="M:ComponentPro.Saml2.Attribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLAttribute</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <param name="attributeValue">The attribute value.</param>
            <seealso cref="T:ComponentPro.Saml2.SamlAttributeNameFormat"/>
        </member>
        <member name="M:ComponentPro.Saml2.Attribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>SAMLAttribute</c> class.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="nameFormat">The name format.</param>
            <param name="friendlyName">The friendly name.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="attributeType">The attribute type.</param>
            <seealso cref="T:ComponentPro.Saml2.SamlAttributeNameFormat"/>
        </member>
        <member name="M:ComponentPro.Saml2.Attribute.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Attribute.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.AttributeQuery">
            <summary>
            Represents the Attribute Query.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SubjectQuery">
            <summary>
            Represents the SubjectQuery element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.SubjectQuery"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectQuery.#ctor(ComponentPro.Saml2.Subject)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.SubjectQuery"/> class.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.SubjectQuery"/> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectQuery.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeQuery.#ctor">
            <summary>
            Initializes a new instance of the AttributeQuery.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AttributeQuery class.
            </summary>
            <param name="xmlElement">The AttributeQuery XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeQuery.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeQuery.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeQuery.ToString">
            <summary>
            Returns a System.String that represents the current object.
            </summary>
            <returns>A System.String that represents the current object.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.AttributeQuery.Attributes">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Attribute"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AttributeStatement">
            <summary>
            Represents an attribute statement.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Statement">
            <summary>
            Represents a statement.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Statement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Statement"/> class.
            </summary>
            <param name="element">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeStatement.#ctor">
            <summary>
            Initializes a new instance of the <c>AttributeStatement</c> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>AttributeStatement</c> class.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeStatement.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeStatement.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AttributeStatement.EncryptedAttributes">
            <summary>
            Returns all encrypted attributes. 
            </summary>
            <returns>The encrypted attribute.</returns>
            <seealso cref="P:ComponentPro.Saml2.AttributeStatement.Attributes"/>
            <seealso cref="T:ComponentPro.Saml2.EncryptedAttribute"/>
        </member>
        <member name="P:ComponentPro.Saml2.AttributeStatement.UnencryptedAttributes">
            <summary>
            Returns all unencrypted attributes. 
            </summary>
            <returns>The unencrypted attribute.</returns>
            <seealso cref="P:ComponentPro.Saml2.AttributeStatement.Attributes"/>
            <seealso cref="T:ComponentPro.Saml2.Attribute"/>
        </member>
        <member name="P:ComponentPro.Saml2.AttributeStatement.Attributes">
            <summary>
            Gets or sets the attributes. 
            </summary>
            <value>
            The attributes.
            </value>
            <seealso cref="T:ComponentPro.Saml2.Attribute"/>
            <seealso cref="T:ComponentPro.Saml2.EncryptedAttribute"/>
        </member>
        <member name="T:ComponentPro.Saml2.AttributeValue">
            <summary>
            The AttributeValue element supplies the value of a specified SAML attribute. It is of the xs:anyType type, which allows any well-formed XML to appear as the content of the element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeValue.#ctor">
            <summary>
            Initializes a new instance of the AttributeValue class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AttributeValue class with the specified attribute value.
            </summary>
            <param name="data">The attribute value data.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the AttributeValue class with the specified attribute value.
            </summary>
            <param name="type">The attribute value type.</param>
            <param name="data">The attribute value data.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeValue.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Object)">
            <summary>
            Initializes a new instance of the AttributeValue class with the specified attribute value.
            </summary>
            <param name="xmlAttributes">The XML attributes.</param>
            <param name="type">The attribute value type.</param>
            <param name="data">The attribute value data.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeValue.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeValue.ToString">
            <summary>
            Returns the attribute's value.
            </summary>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AttributeValue.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument"></param>
            <returns></returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AttributeValue.Data">
            <summary>
            Gets or sets the attribute value data.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Audience">
            <summary>
            A URI reference that identifies an intended audience. The URI reference MAY identify a document
            that describes the terms and conditions of audience membership. It MAY also contain the unique
            identifier URI from a SAML name identifier.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Audience.#ctor">
            <summary>
            Initializes a new instance of the Audience class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Audience.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Audience class with the specified uri.
            </summary>
            <param name="uri">The Uri.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Audience.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Audience class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Audience.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Audience.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Audience.Uri">
            <summary>
            Gets or sets the URI reference that identifies an intended audience.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AudienceRestriction">
            <summary>
            The AudienceRestriction element specifies that the assertion is addressed to one or more
            specific audiences identified by Audience elements. Although a SAML relying party that is outside the
            audiences specified is capable of drawing conclusions from an assertion, the SAML asserting party
            explicitly makes no representation as to accuracy or trustworthiness to such a party.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Condition">
            <summary>
            Represents a condition.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Condition.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Condition"/> class.
            </summary>
            <param name="element">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AudienceRestriction.#ctor">
            <summary>
            Initializes a new instance of the AudienceRestriction class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AudienceRestriction.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AudienceRestriction class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AudienceRestriction.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AudienceRestriction.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AudienceRestriction.Audiences">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml2.Audience"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AuthenticatingAuthority">
            <summary>
            Represents the unique identifier of authentication authority that was involved in the authentication of the principal.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthenticatingAuthority.#ctor">
            <summary>
            Initializes a new instance of the AuthenticatingAuthority class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthenticatingAuthority.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthenticatingAuthority class with the specified URI.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AuthenticatingAuthority.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthenticatingAuthority class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthenticatingAuthority.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthenticatingAuthority.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AuthenticatingAuthority.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AuthnContext">
            <summary>
            The AuthnContext element specifies the context of an authentication event. The element can contain
            an authentication context class reference, an authentication context declaration or declaration reference,
            or both.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContext.#ctor">
            <summary>
            Initializes a new instance of the AuthnContext class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContext.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthnContext class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContext.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContext.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnContext.AuthenticatingAuthorities">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml2.AuthenticatingAuthority"/>.
            </summary>
            <remarks>
            Zero or more unique identifiers of authentication authorities that were involved in the authentication of
            the principal (not including the assertion issuer, who is presumed to have been involved without being
            explicitly named here).
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnContext.AuthnContextClassRef">
            <summary>
            Gets or sets the URI reference identifying an authentication context class that describes the authentication context declaration that follows.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnContext.AuthnContextDecl">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.AuthnContext.AuthnContextDecl"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnContext.AuthnContextDeclRef">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.AuthnContext.AuthnContextDeclRef"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AuthnContextClassRef">
            <summary>
            Represents the URI reference identifying an authentication context class.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlAuthenticateContext"/>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextClassRef.#ctor">
            <summary>
            Initializes a new instance of the AuthnContextClassRef class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextClassRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthnContextClassRef class with the specified uri.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextClassRef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthnContextClassRef class with from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextClassRef.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextClassRef.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnContextClassRef.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlAuthenticateContext"/>
        </member>
        <member name="T:ComponentPro.Saml2.AuthnContextDecl">
            <summary>
            Represents the authentication context declaration provided by value.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDecl.#ctor">
            <summary>
            Initializes a new instance of the AuthnContextDecl class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDecl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthnContextDecl class with the specified declaration.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDecl.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthnContextDecl class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDecl.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDecl.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnContextDecl.Declaration">
            <summary>
            Gets or sets the declaration.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AuthnContextDeclRef">
            <summary>
            Represents the URI reference that identifies such a declaration.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDeclRef.#ctor">
            <summary>
            Initializes a new instance of the AuthnContextDeclRef.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDeclRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthnContextDeclRef with the specified URI.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDeclRef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthnContextDeclRef from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDeclRef.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnContextDeclRef.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnContextDeclRef.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AuthnQuery">
            <summary>
            Represents the AuthnQuery.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnQuery.#ctor">
            <summary>
            Initializes a new instance of the AuthnQuery class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthnQuery class from an XML.
            </summary>
            <param name="xmlElement">The AuthnQuery XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnQuery.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnQuery.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnQuery.RequestedAuthnContext">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.AuthnQuery.RequestedAuthnContext"/>.
            </summary>
            <remarks>
            If present, specifies a filter for possible responses. Such a query asks the question "What assertions
            containing authentication statements do you have for this subject that satisfy the authentication
            context requirements in this element?"
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnQuery.SessionIndex">
            <summary>
            Gets or sets the session index.
            </summary>
            <remarks>
            If present, specifies a filter for possible responses. Such a query asks the question �What assertions
            containing authentication statements do you have for this subject within the context of the supplied
            session information?�
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml2.AuthnRequest">
            <summary>
            Represents the AuthnRequest.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.Create(System.Web.HttpRequest,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object from the specified HTTP Request object. It extracts and convert the SAMLRequest query string variable to <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.
            </summary>
            <param name="httpRequest">The HTTP Request object.</param>
            <param name="key">The key used for the decryption.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.Create(System.Web.HttpRequest,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object from the specified HTTP Request object. It extracts and convert the specified query string variable to <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.
            </summary>
            <param name="httpRequest">The HTTP Request object.</param>
            <param name="key">The key used for the decryption.</param>
            <param name="messageQueryName">The query string variable name.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.Create(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object from the specified HTTP redirect URL. It extracts and convert the "SAMLRequest" query string variable to <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.
            </summary>
            <param name="redirectUrl">The redirect Url.</param>
            <param name="key">The key used for the decryption.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.Create(System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object from the specified HTTP redirect URL. It extracts and convert the specified query string variable to <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.
            </summary>
            <param name="redirectUrl">The redirect Url.</param>
            <param name="messageQueryName">The query string variable name.</param>
            <param name="key">The key used for the decryption.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.CreateFromHttpPost(System.Web.HttpRequest)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object from the specified HTTP Request object. It extracts and convert the SAMLRequest form variable to <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.
            </summary>
            <param name="httpRequest">The HTTP Request object.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.CreateFromHttpPost(System.Web.HttpRequest,System.String)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object from the specified HTTP Request object. It extracts and convert the specified form variable to <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.
            </summary>
            <param name="httpRequest">The HTTP Request object.</param>
            <param name="messageFormVariableName">The Message form variable name.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.AuthnRequest"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.#ctor">
            <summary>
            Initializes a new instance of the AuthnRequest class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthnRequest class from an XML.
            </summary>
            <param name="xmlElement">The AuthnRequest XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.Redirect(System.Web.HttpResponse,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Creates a full URL and redirect to it based on the provided URL, relay state and encryption key.
            </summary>
            <param name="httpResponse">The HTTP response to send the redirect request.</param>
            <param name="baseUrl">The base URL.</param>
            <param name="relayState">The relay state.</param>
            <param name="key">The encryption key.</param>
            <param name="signatureAlgorithm">The signature algorithm or null to default to http://www.w3.org/2000/09/xmldsig#rsa-sha1 or http://www.w3.org/2000/09/xmldsig#dsa-sha1.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.Redirect(System.Web.HttpResponse,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a full URL and redirect to it based on the provided URL, relay state and encryption key.
            </summary>
            <param name="httpResponse">The HTTP response to send the redirect request.</param>
            <param name="baseUrl">The base URL.</param>
            <param name="relayState">The relay state.</param>
            <param name="key">The encryption key.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.SendHttpPost(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            Creates a POST form and send to the specified HTTP Response obejct based on the provided URL and relay state.
            </summary>
            <param name="httpResponse">The HTTP response to send the redirect request.</param>
            <param name="baseUrl">The base URL.</param>
            <param name="relayState">The relay state.</param>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnRequest.ToString">
            <summary>
            Returns a System.String that represents the current object.
            </summary>
            <returns>A System.String that represents the current object.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.RelayState">
            <summary>
            Gets the relay state extracted by the <b>Create</b> method.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.AssertionConsumerServiceIndex">
            <summary>
            Gets or sets the location to which the Response message should be returned to the requester.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.AssertionConsumerServiceUrl">
            <summary>
            Gets or sets the location to which the Response message MUST be returned to the requester.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.AttributeConsumingServiceIndex">
            <summary>
            Gets or sets the information associated with the requester describing the SAML attributes the
            requester desires or requires to be supplied by the identity provider in the Response message.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.Conditions">
            <summary>
            Gets or sets the conditions.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.ForceAuthn">
            <summary>
            Gets or sets the boolean flag indicating whether identity provider MUST authenticate the presenter directly rather than rely on a previous security context.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.IsPassive">
            <summary>
            Gets or sets the boolean flag indicating the identity provider and the user agent itself MUST NOT visibly take control
            of the user interface from the requester and interact with the presenter in a noticeable fashion.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.NameIdPolicy">
            <summary>
            Gets or sets the Name Identifier Policy.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.ProtocolBinding">
            <summary>
            Gets or sets the protocol binding.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlBindingUri"/>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.ProviderName">
            <summary>
            Gets or sets the provider name.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.RequestedAuthnContext">
            <summary>
            Gets or sets the requested authentication context.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.Scoping">
            <summary>
            Gets or sets the scoping.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AuthnStatement">
            <summary>
            Represents the authentication statement.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnStatement.#ctor">
            <summary>
            Initializes a new instance of AuthnStatement class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of AuthnStatement class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnStatement.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthnStatement.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnStatement.AuthnContext">
            <summary>
            Gets or sets the context used by the authenticating authority up to and including the authentication event that yielded this statement.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnStatement.AuthnInstant">
            <summary>
            Gets or sets the time at which the authentication took place. The time value is encoded in UTC.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnStatement.SessionIndex">
            <summary>
            Gets or sets the index of a particular session between the principal identified by the subject and the authenticating authority.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnStatement.SessionNotOnOrAfter">
            <summary>
            Gets or sets the time instant at which the session between the principal identified by the 
            subject and the SAML authority issuing this statement MUST be considered ended. The time value is encoded in UTC.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthnStatement.SubjectLocality">
            <summary>
            Gets or sets the DNS domain name and IP address for the system from which the assertion subject was apparently authenticated.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AuthzDecisionQuery">
            <summary>
            Represents the Authz Decision Query.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionQuery.#ctor">
            <summary>
            Initializes a new instance of the AuthzDecisionQuery class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionQuery.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthzDecisionQuery class from an XML.
            </summary>
            <param name="xmlElement">The AuthzDecisionQuery XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionQuery.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionQuery.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionQuery.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionQuery.ToString">
            <summary>
            Returns a System.String that represents the current object.
            </summary>
            <returns>A System.String that represents the current object.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.AuthzDecisionQuery.Actions">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml2.Action"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthzDecisionQuery.Evidence">
            <summary>
            Gets or sets the Evidence.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthzDecisionQuery.Resource">
            <summary>
            Gets or sets the resource.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.AuthzDecisionStatement">
            <summary>
            The AuthzDecisionStatement element describes a statement by the SAML authority asserting that
            a request for access by the assertion subject to the specified resource has resulted in the specified
            authorization decision on the basis of some optionally specified evidence.
            </summary>
            <remarks>
            Assertions containing AuthzDecisionStatement elements MUST contain a Subject element.
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionStatement.#ctor">
            <summary>
            Initializes a new instance of the AuthzDecisionStatement class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionStatement.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthzDecisionStatement class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionStatement.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.AuthzDecisionStatement.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.AuthzDecisionStatement.Actions">
            <summary>
            Gets or sets the set of <see cref="T:ComponentPro.Saml2.Action"/>s authorized to be performed on the specified resource.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthzDecisionStatement.Decision">
            <summary>
            Gets or sets the decision rendered by the SAML authority with respect to the specified resource.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlAuthorizationDecision"/>
        </member>
        <member name="P:ComponentPro.Saml2.AuthzDecisionStatement.Evidence">
            <summary>
            Gets or sets the set of assertions that the SAML authority relied on in making the decision.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.AuthzDecisionStatement.Resource">
            <summary>
            Gets or sets the the URI reference identifying the resource to which access authorization is sought.
            </summary>
            <remarks>
            This attribute MAY have the value of the empty URI reference (""), and the meaning is defined to be "the start of the current document".
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml2.BaseId">
            <summary>
            The BaseID element is an extension point that allows applications to add new kinds of identifiers. Its
            BaseIDAbstractType complex type is abstract and is thus usable only as the base of a derived type.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.BaseId.#ctor">
            <summary>
            Initializes a new instance of the BaseId class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.BaseId.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the BaseId class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.BaseId.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the BaseId class from an XML element.
            </summary>
            <param name="nameQualifier">The security or administrative domain that qualifies the identifier.</param>
            <param name="spNameQualifier">Further qualifies an identifier with the name of a service provider or affiliation of providers.</param>
        </member>
        <member name="M:ComponentPro.Saml2.BaseId.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.BaseId.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.BaseId.NameQualifier">
            <summary>
            Gets or sets the security or administrative domain that qualifies the identifier.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.BaseId.SpNameQualifier">
            <summary>
            Further qualifies an identifier with the name of a service provider or affiliation of providers.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Binding.Saml2Artifact">
            <summary>
            Represents the SAML v2.0 base Artifact.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2Artifact.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Binding.Saml2Artifact"/> class.
            </summary>
            <param name="type">The artifact type.</param>
            <param name="index">The artifact endpoint index.</param>
        </member>
        <member name="P:ComponentPro.Saml2.Binding.Saml2Artifact.EndpointIndex">
            <summary>
            Gets or sets the endpoint index.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004">
            <summary>
            Represents SAML2 Artifact type code 0004. 
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004"/> class.
            </summary>
            <param name="messageHandle">The message handle.</param>
            <param name="sourceId">The source id.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004"/> class.
            </summary>
            <param name="endpointIndex">The endpoint index.</param>
            <param name="messageHandle">The message handle.</param>
            <param name="sourceId">The source id.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004"/> class.
            </summary>
            <param name="artifact">The artifact string.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.Parse(System.Byte[])">
            <summary>
            Parses and create an Artifact type code 0004 from an array of bytes.
            </summary>
            <param name="artifact">The artifact data.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004"/>.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.SendPostForm(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            Generates and sends a POST form from the specified assertion consumer cervice Url and relay state.
            </summary>
            <param name="httpResponse">The HTTP Response object.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service url.</param>
            <param name="relayState">The relay state.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.SendPostForm(System.IO.Stream,System.String,System.String)">
            <summary>
            Generates and sends a POST form from the specified assertion consumer cervice Url and relay state.
            </summary>
            <param name="outputStream">The output Stream.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service url.</param>
            <param name="relayState">The relay state.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.Redirect(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            Creates and redirects to a URL from the specified assertion consumer service Url and relay state.
            </summary>
            <param name="httpResponse">The HTTP Response object.</param>
            <param name="assertionConsumerServiceUrl">The assertion consumer service url.</param>
            <param name="relayState">The relay state.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.CreateFromHttpArtifactQueryString(System.Web.HttpRequest)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004"/> object by extracting the SAML Artifact from the specified HTTP query string.
            </summary>
            <param name="httpRequest">The HTTP request object.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.CreateFromHttpArtifactHttpForm(System.Web.HttpRequest)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004"/> object by extracting the SAML Artifact from the specified HTTP post form.
            </summary>
            <param name="httpRequest">The HTTP request object.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.Binding.Saml2ArtifactType0004"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.IsValid(System.String)">
            <summary>
            Checks to see whether the specified artifact string is valid or not.
            </summary>
            <param name="artifact">The artifact string.</param>
            <returns><c>true</c> if the specified artifact string is valid, otherwise is <c>false</c>.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.RemainingArtifact">
            <summary>
            Gets the remaining array of bytes.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.SourceId">
            <summary>
            Gets or sets the source id.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.MessageHandle">
            <summary>
            Gets or sets the message handle.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.RelayState">
            <summary>
            Gets the relay state extracted by the <see cref="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.CreateFromHttpArtifactHttpForm(System.Web.HttpRequest)"/> and <see cref="M:ComponentPro.Saml2.Binding.Saml2ArtifactType0004.CreateFromHttpArtifactQueryString(System.Web.HttpRequest)"/> methods.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Conditions">
            <summary>
            Represents the Conditions element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Conditions.#ctor">
            <summary>
            Initializes a new instance of the Conditions class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Conditions.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the Conditions class with the specified time span.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Conditions.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Conditions class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Conditions.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the Conditions class with the specified NotBefore and NotOnOrAfter.
            </summary>
            <param name="notBefore">The not before time as coordinated universal time (UTC).</param>
            <param name="notOnOrAfter">The not on or after time as coordinated universal time (UTC).</param>
        </member>
        <member name="M:ComponentPro.Saml2.Conditions.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Conditions.IsWithinTimePeriod">
            <summary>
            Indicates whether the current UTC time is within the not before and not on or after period.
            </summary>
            <returns>True if within the time period; otherwise False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Conditions.IsWithinTimePeriod(System.TimeSpan)">
            <summary>
            Indicates whether the current UTC time is within the not before and not on or after period, if specified. The supplied time span is to allow for clock skew.
            </summary>
            <returns>True if within the time period; otherwise False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Conditions.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Conditions.ConditionsList">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Condition"/>.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.AudienceRestriction"/>
            <seealso cref="T:ComponentPro.Saml2.OneTimeUse"/>
            <seealso cref="T:ComponentPro.Saml2.ProxyRestriction"/>
        </member>
        <member name="P:ComponentPro.Saml2.Conditions.NotBefore">
            <summary>
            Gets or sets the earliest time instant at which the assertion is valid.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Conditions.NotOnOrAfter">
            <summary>
            Gets or sets the time instant at which the assertion has expired.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.EncryptedAssertion">
            <summary>
            Represents an assertion in encrypted fashion, as defined by the XML Encryption Syntax and Processing specification [XMLEnc].
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.EncryptedElementType">
            <summary>
            Represents the encrypted element base.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedElementType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.EncryptedElementType"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedElementType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.EncryptedElementType"/> class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedElementType.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the EncryptedElementBase class with the specified encrypted data and encrypted keys.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedElementType.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedElementType.GetEncryptedKeyObjects">
            <summary>
            Gets a list of <see cref="T:System.Security.Cryptography.Xml.EncryptedKey"/>.
            </summary>
            <returns>A list of <see cref="T:System.Security.Cryptography.Xml.EncryptedKey"/>.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.EncryptedElementType.EncryptedData">
            <summary>
            Gets or sets the encrypted data.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.EncryptedElementType.EncryptedKeys">
            <summary>
            Gets or sets the encrypted keys.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.#ctor">
            <summary>
            Initializes a new instance of the EncryptedAssertion class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the EncryptedAssertion class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the EncryptedAssertion class.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.#ctor(ComponentPro.Saml2.Assertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the EncryptedAssertion class.
            </summary>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="samlAssertion">The SAML assertion.</param>
            <param name="x509Certificate">The X509 certificate used for encrypting the data.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.#ctor(ComponentPro.Saml2.Assertion,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the EncryptedAssertion class.
            </summary>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="samlAssertion">The SAML assertion.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="x509Certificate">The X509 certificate used for encrypting the data.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the EncryptedAssertion class.
            </summary>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="samlAssertion">The SAML assertion XML.</param>
            <param name="x509Certificate">The X509 certificate used for encrypting the data.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.#ctor(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the EncryptedAssertion class.
            </summary>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="samlAssertion">The SAML assertion XML.</param>
            <param name="x509Certificate">The X509 certificate used for encrypting the data.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted SAML assertion.
            </summary>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or null if specified in the encrypted data.</param>
            <returns>The decrypted SAML assertion.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.DecryptToXmlElement(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted SAML assertion to XML.
            </summary>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or null if specified in the encrypted data.</param>
            <returns>The decrypted SAML assertion XML.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.DecryptToXmlElement(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted SAML assertion to XML.
            </summary>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or null if specified in the encrypted data.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or null if specified in the encrypted key.</param>
            <returns>The decrypted SAML assertion XML.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the decryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.GetXml">
            <summary>
            Converts the object into XML data.
            </summary>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAssertion.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.EncryptedAttribute">
            <summary>
            Represents the SAML attribute in encrypted fashion.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.#ctor">
            <summary>
            Initializes a new instance of the EncryptedAttribute class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the EncryptedAttribute class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the EncryptedAttribute class with the specified encrypted data and encrypted keys.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.#ctor(ComponentPro.Saml2.Attribute,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the EncryptedAttribute class with the specified encrypted data and encrypted keys.
            </summary>
            <param name="samlAttribute">The SAML attribute.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.#ctor(ComponentPro.Saml2.Attribute,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the EncryptedAttribute class with the specified encrypted data and encrypted keys.
            </summary>
            <param name="samlAttribute">The SAML attribute.</param>
            <param name="keyEncryptionMethod">The method for encrypting the key.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.#ctor(ComponentPro.Saml2.Attribute,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the EncryptedAttribute class with the specified encrypted data and encrypted keys.
            </summary>
            <param name="samlAttribute">The SAML attribute.</param>
            <param name="x509Certificate">The X.509 certificate used when encrypting the data.</param>
            <param name="dataEncryptionMethod">The method for encrypting the data.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the encryption fails.
            </exception>
            <seealso cref="M:ComponentPro.Saml2.EncryptedAssertion.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)"/>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted attribute.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data. The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p. The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML attribute.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the decryption fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted attribute.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data. The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p. The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or null if specified in the encrypted key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML attribute.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the decryption fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted attribute.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data. The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p. The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML attribute.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the decryption fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted attribute.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data. The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p. The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </remarks>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or null if specified in the encrypted key.</param>
            <returns>The SAML attribute.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the decryption fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptedKey,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted attribute.
            </summary>
            <remarks>
            The asymmetric key is used to decrypt the symmetric key contained within the encrypted data. The symmetric key is used
            to decrypt the data. The encryption method for the encrypted symmetric key is expected to be 
            http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p. The encryption method for the data is specified in the encrypted data or may be explicitly specified.
            </remarks>
            <param name="keyDecryptingKey">The asymmetric key decrypting key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or <c>null</c> if specified in the encrypted data.</param>
            <param name="encryptedKey">The encrypted key or <c>null</c> if specified in the encrypted data.</param>
            <returns>The SAML attribute.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the decryption fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedAttribute.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.EncryptedId">
            <summary>
            The EncryptedId element is of type EncryptedElementType, and carries the content of an
            unencrypted identifier element in encrypted fashion, as defined by the XML Encryption Syntax and
            Processing specification [XMLEnc].
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.#ctor">
            <summary>
            Initializes a new instance of the EncryptedId class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the EncryptedId class from an XML element.
            </summary>
            <param name="xmlElement">The encrypted id XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the EncryptedId class.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.#ctor(ComponentPro.Saml2.NameId,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the EncryptedId class from a Name Idenfifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data. The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-1_5. 
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </remarks>
            <param name="nameId">The <see cref="T:ComponentPro.Saml2.NameId"/> object.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.#ctor(ComponentPro.Saml2.NameId,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the EncryptedId class from a Name Idenfifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data. The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-1_5. 
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </remarks>
            <param name="nameId">The <see cref="T:ComponentPro.Saml2.NameId"/> object.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.#ctor(ComponentPro.Saml2.NameId,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the EncryptedId class from a Name Idenfifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data. The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-1_5. 
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </remarks>
            <param name="nameId">The <see cref="T:ComponentPro.Saml2.NameId"/> object.</param>
            <param name="x509Certificate">The X509 certificate used for encrypting the data.</param>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.#ctor(ComponentPro.Saml2.NameId,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the EncryptedId class from a Name Idenfifier.
            </summary>
            <remarks>
            A random symmetric session key is generated from the public key contained within the X.509 certificate.
            The symmetric key is used to encrypt the data. The encryption method for the encrypted symmetric key is http://www.w3.org/2001/04/xmlenc#rsa-1_5. 
            The specified data encryption method is used. For example, http://www.w3.org/2001/04/xmlenc#aes256-cbc.
            </remarks>
            <param name="nameId">The <see cref="T:ComponentPro.Saml2.NameId"/> object.</param>
            <param name="x509Certificate">The X509 certificate used for encrypting the data.</param>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or null if specified in the encrypted key.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="keyDecryptingKey">The asymmetric key for the decryption.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="keyDecryptingKey">The asymmetric key for the decryption.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or null if specified in the encrypted key.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <param name="dataEncryptionMethod">The method for the data encryption.</param>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or null if specified in the encrypted key.</param>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.EncryptedId.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Evidence">
            <summary>
            The Evidence element contains one or more assertions or assertion references that the SAML
            authority relied on in issuing the authorization decision.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Evidence.#ctor">
            <summary>
            Initializes a new instance of the Evidence class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Evidence.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Evidence class from an XML.
            </summary>
            <param name="xmlElement">The evidence XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Evidence.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Evidence.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Evidence.Items">
            <summary>
            Gets or sets the list of evidence.
            </summary>
            <remarks>
            It contains a mixture of one or more of the following elements:
            <see cref="T:ComponentPro.Saml2.AssertionIdRef"/>, <see cref="T:ComponentPro.Saml2.AssertionUriRef"/>, <see cref="T:ComponentPro.Saml2.Assertion"/>, or <see cref="T:ComponentPro.Saml2.EncryptedAssertion"/>.
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml2.Extensions">
            <summary>
            Represents the SAML extensions.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Extensions.#ctor">
            <summary>
            Initializes a new instance of the Extensions class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Extensions.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Extensions class from an XML.
            </summary>
            <param name="xmlElement">The Extensions XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Extensions.#ctor(System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the Extensions class.
            </summary>
            <param name="data">The extensions data.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Extensions.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Extensions.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Extensions.Data">
            <summary>
            Gets or sets the extensions data.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.ProtocolMessage">
            <summary>
            Represents general Protocol message
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ProtocolMessage.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ProtocolMessage.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.ProtocolMessage"/> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.ProtocolMessage.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the message to an XML element. This method is not supported by this class.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML element.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.ProtocolMessage.Id">
            <summary>
            Gets or sets the message id.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.MetadataMessage">
            <summary>
            Represents general Metadata message
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.MetadataMessage.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.MetadataMessage.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.MetadataMessage"/> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.MetadataMessage.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the message to an XML element. This method is not supported by this class.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML element.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.MetadataMessage.Id">
            <summary>
            Gets or sets the message id.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.GetComplete">
            <summary>
            Specifies a URI reference that can be used to retrieve the complete list.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.GetComplete.#ctor">
            <summary>
            Initializes a new instance of the GetComplete class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.GetComplete.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GetComplete class with the specified uri.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.GetComplete.#ctor(System.Xml.XmlElement)">
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.GetComplete.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.GetComplete.ToString">
            <summary>
            Returns the URI.
            </summary>
            <returns>The URI.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.GetComplete.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.GetComplete.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.IdpEntry">
            <summary>
            The IDPEntry element specifies a single identity provider trusted by the requester to authenticate the presenter.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.IdpEntry.#ctor">
            <summary>
            Initializes a new instance of the IdpEntry class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.IdpEntry.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the IdpEntry class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.IdpEntry.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.IdpEntry.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.IdpEntry.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.IdpEntry.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.IdpEntry.ProviderId">
            <summary>
            Gets or sets the provider identifier.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.IdpList">
            <summary>
            The IDPList element specifies the identity providers trusted by the requester to authenticate the presenter.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.IdpList.#ctor">
            <summary>
            Initializes a new instance of the IdpList class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.IdpList.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the IdpList class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.IdpList.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.IdpList.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.IdpList.GetComplete">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.IdpList.GetComplete"/> object.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.IdpList.IdpEntries">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.IdpEntry"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Issuer">
            <summary>
            Provides information about the issuer of a SAML assertion or protocol message. The element requires the use of a string to carry the issuer's name, but permits various pieces of descriptive data.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.NameIdType">
            <summary>
            Represents the NameIDType XML element.
            </summary>
            <remarks>
            The NameIDType complex type is used when an element serves to represent an entity by a string-valued name.
            It is a more restricted form of identifier than the BaseID element and is the type underlying both the NameID and Issuer elements.
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdType.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:ComponentPro.Saml2.NameIdType"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdType.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:ComponentPro.Saml2.NameIdType"/> class.
            </summary>
            <param name="nameId">The name identifier.</param>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.NameIdType"/> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdType.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:ComponentPro.Saml2.NameIdType"/> class.
            </summary>
            <param name="nameId"></param>
            <param name="nameQualifier"></param>
            <param name="spNameQualifier"></param>
            <param name="format"></param>
            <param name="spProvidedId"></param>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdType.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdType.Format">
            <summary>
            Gets or sets the URI reference representing the classification of string-based identifier information.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlNameIdentifierFormat"/>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdType.NameIdentifier">
            <summary>
            Gets or sets the name identifier.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdType.NameQualifier">
            <summary>
            Gets or sets the security or administrative domain that qualifies the name.
            </summary>
            <remarks>
            This attribute provides a means to federate names from disparate user stores without collision.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdType.SpNameQualifier">
            <summary>
            Gets or sets the SP name qualifier.
            </summary>
            <remarks>
            Further qualifies a name with the name of a service provider or affiliation of providers. This attribute provides an additional means to federate names on the basis of the relying party or parties.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdType.SpProvidedId">
            <summary>
            Gets or sets the name identifier established by a service provider or affiliation of providers for the entity, if it is different from the primary name identifier given in the content of the element.
            </summary>
            <remarks>
            This attribute provides a means of integrating the use of SAML with existing identifiers already in use by a service provider.
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml2.Issuer.GetIssuer(System.Xml.XmlElement)">
            <summary>
            Gets the issuer text.
            </summary>
            <param name="xmlElement">The XML element containing the issuer as an offspring element.</param>
            <returns>The issuer text or null if none.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Issuer.#ctor">
            <summary>
            Initializes a new instance of the Issuer class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Issuer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Issuer class with the specified name id.
            </summary>
            <param name="nameId">The Name Idenfifier.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Issuer.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Issuer class from an XML.
            </summary>
            <param name="xmlElement">The issuer XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Issuer.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Issuer class.
            </summary>
            <param name="nameId">The Name Identifier.</param>
            <param name="nameQualifier">The name qualifier.</param>
            <param name="spNameQualifier">The SP name qualifier.</param>
            <param name="format">The format.</param>
            <param name="spProvidedId">The SP provided identifier.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Issuer.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Issuer.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.ArtifactResolutionService">
            <summary>
            Represents SAML2 Artifact Resolution Service.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.IndexedEndpointType">
            <summary>
            Represents the IndexedEndpoint Type.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.Endpoint">
            <summary>
            Describes a SAML protocol binding endpoint at which a SAML entity can be sent protocol messages.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Endpoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.Endpoint"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Endpoint.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.Endpoint"/> class from the XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Endpoint.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.Endpoint"/> class.
            </summary>
            <param name="binding">The binding info.</param>
            <param name="location">The location info.</param>
            <param name="responseLocation">The response location info.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Endpoint.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Endpoint.Binding">
            <summary>
            Gets or sets the SAML binding supported by the endpoint.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Endpoint.Location">
            <summary>
            Gets or sets the location of the endpoint.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Endpoint.ResponseLocation">
            <summary>
            Gets or sets the different location to which response messages sent as part of the protocol or profile should be sent.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.IndexedEndpointType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.IndexedEndpointType"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.IndexedEndpointType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.IndexedEndpointType"/> class from the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.IndexedEndpointType.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.IndexedEndpointType"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="isDefault">A boolean value indicating whether this IndexEndpointType is default.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.IndexedEndpointType.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.IndexedEndpointType.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.IndexedEndpointType.IsDefault">
            <summary>
            Gets or sets the boolean flag indicating the default endpoint among an indexed set.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ArtifactResolutionService.#ctor">
            <summary>
            Initializes a new instance of the ArtifactResolutionService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ArtifactResolutionService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ArtifactResolutionService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ArtifactResolutionService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ArtifactResolutionService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AssertionConsumerService">
            <summary>
            Represents SAML2 Assertion Consumer Service.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AssertionConsumerService.#ctor">
            <summary>
            Initializes a new instance of the AssertionConsumerService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AssertionConsumerService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AssertionConsumerService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AssertionConsumerService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AssertionConsumerService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AssertionIdRequestService">
            <summary>
            Represents SAML2 AssertionId Request Service.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AssertionIdRequestService.#ctor">
            <summary>
            Initializes a new instance of the AssertionIdRequestService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AssertionIdRequestService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AssertionIdRequestService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AssertionIdRequestService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AssertionIdRequestService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AttributeProfile">
            <summary>
            Represents SAML2 Attribute Profile.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeProfile.#ctor">
            <summary>
            Initializes a new instance of the AttributeProfile class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeProfile.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AttributeProfile class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeProfile.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeProfile.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeProfile.ProfileUri">
            <summary>
            Gets or sets the format of the NameID.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AttributeService">
            <summary>
            Represents SAML2 Attribute Service.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeService.#ctor">
            <summary>
            Initializes a new instance of the AttributeService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AttributeService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AuthnQueryService">
            <summary>
            Represents SAML2 Authn Query Service.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthnQueryService.#ctor">
            <summary>
            Initializes a new instance of the AuthnQueryService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthnQueryService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthnQueryService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthnQueryService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthnQueryService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AuthzService">
            <summary>
            Represents SAML2 Authz Service.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthzService.#ctor">
            <summary>
            Initializes a new instance of the AuthzService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthzService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthzService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthzService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthzService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.ICacheableSamlObject">
            <summary>
            A functional interface for SAMLElements that provide cache duration information.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ICacheableSamlObject.CacheDuration">
            <summary>
            Gets or sets the maximum time, in milliseconds, that this descriptor should be cached.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.ITimeBoundSamlObject">
            <summary>
            A functional interface for SAMLElements that are bound with a "validUntil" attribute.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ITimeBoundSamlObject.IsTimeValid">
            <summary>
            Checks to see if the current time is past the validUntil time.
            </summary>
            <returns>true if the current time is past the validUntil time; otherwise is false.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ITimeBoundSamlObject.ValidUntil">
            <summary>
            Gets or sets the date until which this descriptor is valid.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.LocalizedString">
            <summary>
            Localized String with the language associated with it.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.LocalizedString.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.LocalizedString"/> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.LocalizedString.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.LocalizedString"/> class.
            </summary>
            <param name="localizedString">The localized string.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.LocalizedString.Equals(System.Object)">
            <summary>
            Determines if two LocalizedStrings are equal, that is, if both thier localized string and language have case-sentivite equality.
            </summary>
            <param name="obj">The localized string to compare.</param>
            <returns>True if two localized string are equal; otherwise is false.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.LocalizedString.GetHashCode">
            <summary>
            Returns the hash code for this string.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.LocalizedString.op_Equality(ComponentPro.Saml2.Metadata.LocalizedString,ComponentPro.Saml2.Metadata.LocalizedString)">
            <summary>
            Returns a boolean value indicating whether the left localized string is equal to the right one.
            </summary>
            <param name="x">The localized string to compare.</param>
            <param name="y">The localized string to compare with.</param>
            <returns>true if x is equal to y; otherwise is false.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.LocalizedString.op_Inequality(ComponentPro.Saml2.Metadata.LocalizedString,ComponentPro.Saml2.Metadata.LocalizedString)">
            <summary>
            Returns a boolean value indicating whether the left localized string is not equal to the right one.
            </summary>
            <param name="x">The localized string to compare.</param>
            <param name="y">The localized string to compare with.</param>
            <returns>true if x is not equals to y; otherwise is false.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.LocalizedString.Language">
            <summary>
            Gets or sets the language of the string.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.LocalizedString.String">
            <summary>
            Gets or sets the localized string.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.ManageNameIdService">
            <summary>
            Represents SAML 2.0 Metadata ManageNameIdService.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ManageNameIdService.#ctor">
            <summary>
            Initializes a new instance of the ManageNameIdService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ManageNameIdService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ManageNameIdService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ManageNameIdService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ManageNameIdService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.NameIdFormat">
            <summary>
            Represents SAML Name Identifier Format.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.NameIdFormat.#ctor">
            <summary>
            Initializes a new instance of the NameIdFormat class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.NameIdFormat.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the NameIdFormat class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.NameIdFormat.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.NameIdFormat.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.NameIdFormat.Format">
            <summary>
            Gets or sets the format of the NameID.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.NameIdMappingService">
            <summary>
            Represents SAML 2.0 Metadata NameIDMappingService.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.NameIdMappingService.#ctor">
            <summary>
            Initializes a new instance of the NameIdMappingService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.NameIdMappingService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the NameIdMappingService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.NameIdMappingService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.NameIdMappingService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.ServiceDescription">
            <summary>
            Represents the ServiceDescription class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceDescription.#ctor">
            <summary>
            Initializes a new instance of the ServiceDescription class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceDescription.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ServiceDescription class from an XML.
            </summary>
            <param name="xmlElement">The ServiceDescription XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ServiceDescription class.
            </summary>
            <param name="name"></param>
            <param name="language"></param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceDescription.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceDescription.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ServiceDescription.Description">
            <summary>
            Gets or sets the name of the organization.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.ServiceName">
            <summary>
            Represents the ServiceName class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceName.#ctor">
            <summary>
            Initializes a new instance of the ServiceName class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceName.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ServiceName class from an XML.
            </summary>
            <param name="xmlElement">The ServiceName XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ServiceName class.
            </summary>
            <param name="name"></param>
            <param name="language"></param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceName.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ServiceName.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ServiceName.Name">
            <summary>
            Gets or sets the name of the organization.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.SingleLogoutService">
            <summary>
            Represents SAML 2.0 Metadata SingleLogoutService.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SingleLogoutService.#ctor">
            <summary>
            Initializes a new instance of the SingleLogoutService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SingleLogoutService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SingleLogoutService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SingleLogoutService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SingleLogoutService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.SingleSignOnService">
            <summary>
            Represents SAML 2.0 Metadata SingleSignOnService.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SingleSignOnService.#ctor">
            <summary>
            Initializes a new instance of the SingleSignOnService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SingleSignOnService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SingleSignOnService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SingleSignOnService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SingleSignOnService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.SamlNamespaceUris">
            <summary>
            Namespace Uris.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNamespaceUris.Assertion">
            <summary>
            SAML2 Assertion.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNamespaceUris.Metadata">
            <summary>
            SAML2 Metadata.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNamespaceUris.Protocol">
            <summary>
            SAML2 Protocol.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlPrefixes">
            <summary>
            SAML prefixes.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlPrefixes.MD">
            <summary>
            MD.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlPrefixes.SAML">
            <summary>
            SAML.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlPrefixes.SAMLP">
            <summary>
            SAMLP.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlActionNamespace">
            <summary>
            Action namespace identifiers.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlActionNamespace.Ghpp">
            <summary>
            Get/head/put/post.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlActionNamespace.Rwedc">
            <summary>
            Read/write/execute/delete/control.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlActionNamespace.RwedcWithNegation">
            <summary>
            Read/write/execute/delete/control with negation.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlActionNamespace.Unix">
            <summary>
            Unix.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlAction">
            <summary>
            Actions.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.Action"/>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.Control">
            <summary>
            Control.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.Delete">
            <summary>
            Delete.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.Execute">
            <summary>
            Execute.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.Get">
            <summary>
            GET.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.Head">
            <summary>
            HEAD.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.NotControl">
            <summary>
            Negated Control.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.NotDelete">
            <summary>
            Negated Delete.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.NotExecute">
            <summary>
            Negated Execute.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.NotRead">
            <summary>
            Negated Read.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.NotWrite">
            <summary>
            Negated Write.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.Post">
            <summary>
            POST.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.Put">
            <summary>
            PUT.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.Read">
            <summary>
            Read.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAction.Write">
            <summary>
            Write.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlAttributeNameFormat">
            <summary>
            Attribute name format identifiers.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.Attribute" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlAttributeNameFormat.Basic">
            <summary>
            Basic.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAttributeNameFormat.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAttributeNameFormat.Uri">
            <summary>
            URI.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlAuthenticateContext">
            <summary>
            Authentication context classes.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.AuthnContextClassRef" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.AuthenticatedTelephony">
            <summary>
            AuthenticatedTelephony.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.InternetProtocol">
            <summary>
            InternetProtocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.InternetProtocolPassword">
            <summary>
            InternetProtocolPassword.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.Kerberos">
            <summary>
            Kerberos.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.MobileOneFactorContract">
            <summary>
            MobileOneFactorContract.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.MobileOneFactorUnregistered">
            <summary>
            MobileOneFactorUnregistered.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.MobileTwoFactorContract">
            <summary>
            MobileTwoFactorContract.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.MobileTwoFactorUnregistered">
            <summary>
            MobileTwoFactorUnregistered.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.NomadTelephony">
            <summary>
            NomadTelephony.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.PasswordProtectedTransport">
            <summary>
            PasswordProtectedTransport.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.PersonalTelephony">
            <summary>
            PersonalTelephony.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.Pgp">
            <summary>
            PGP.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.PreviousSession">
            <summary>
            PreviousSession.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.SecureRemotePassword">
            <summary>
            SecureRemotePassword.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.Smartcard">
            <summary>
            Smartcard.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.SmartcardPki">
            <summary>
            SmartcardPKI.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.SoftwarePki">
            <summary>
            SoftwarePKI.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.Spki">
            <summary>
            SPKI.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.Telephony">
            <summary>
            Telephony.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.TimeSyncToken">
            <summary>
            TimeSyncToken.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.TlsClient">
            <summary>
            TLSClient.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.X509">
            <summary>
            X509.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticateContext.XmlDSig">
            <summary>
            XMLDSig.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlAuthenticationContextComparison">
            <summary>
            Authentication context comparisons.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.RequestedAuthnContext" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticationContextComparison.Better">
            <summary>
            Better.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticationContextComparison.Exact">
            <summary>
            Exact.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticationContextComparison.Maximum">
            <summary>
            Maximum.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthenticationContextComparison.Minimum">
            <summary>
            Minimum.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlAuthorizationDecision">
            <summary>
            Authorization decisions.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.AuthzDecisionStatement" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthorizationDecision.Deny">
            <summary>
            Deny.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthorizationDecision.Indeterminate">
            <summary>
            Indeterminate.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlAuthorizationDecision.Permit">
            <summary>
            Permit.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlBinding">
            <summary>
            The SAML bindings.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlBindingUri" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlBinding.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBinding.Soap">
            <summary>
            SOAP.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBinding.Paos">
            <summary>
            PAOS.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBinding.HttpRedirect">
            <summary>
            HTTP Redirect.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBinding.HttpPost">
            <summary>
            HTTP POST.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBinding.HttpArtifact">
            <summary>
            HTTP Artifact.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBinding.Uri">
            <summary>
            URI.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlBindingUri">
            <summary>
            The SAML binding URIs.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlBinding"/>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBindingUri.HttpArtifact">
            <summary>
            HTTP artifact
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBindingUri.HttpPost">
            <summary>
            HTTP POST
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBindingUri.HttpRedirect">
            <summary>
            HTTP redirect
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBindingUri.Paos">
            <summary>
            PAOS
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBindingUri.Soap">
            <summary>
            SOAP
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlBindingUri.Uri">
            <summary>
            URI
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SamlBindingUri.BindingToUri(ComponentPro.Saml2.SamlBinding)">
            <summary>
            Converts the binding to the corresponding binding URI.
            </summary>
            <param name="binding">The binding.</param>
            <returns>The binding URI.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the binding is invalid.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.SamlBindingUri.UriToBinding(System.String)">
            <summary>
            Converts the binding URI to the corresponding binding.
            </summary>
            <param name="bindingUri">The binding URI.</param>
            <returns>The binding.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the binding URI is invalid.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.SamlConsentIdentifier">
            <summary>
            Consent identifiers.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.RequestAbstractType" />
            <seealso cref="T:ComponentPro.Saml2.StatusResponseType" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlConsentIdentifier.Explicit">
            <summary>
            Explicit.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlConsentIdentifier.Implicit">
            <summary>
            Implicit.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlConsentIdentifier.Inapplicable">
            <summary>
            Inapplicable.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlConsentIdentifier.Obtained">
            <summary>
            Obtained.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlConsentIdentifier.Prior">
            <summary>
            Prior.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlConsentIdentifier.Unavailable">
            <summary>
            Unavailable.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlConsentIdentifier.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlNameIdentifierFormat">
            <summary>
            Name identifier format identifiers.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.NameIdType" />
            <seealso cref="T:ComponentPro.Saml2.NameId" />
            <seealso cref="T:ComponentPro.Saml2.Issuer" />
            <seealso cref="T:ComponentPro.Saml2.NameIdPolicy" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlNameIdentifierFormat.EmailAddress">
            <summary>
            Email Address.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNameIdentifierFormat.Entity">
            <summary>
            Entity Identifier.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNameIdentifierFormat.Kerberos">
            <summary>
            Kerberos Principal Name.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNameIdentifierFormat.Persistent">
            <summary>
            Persistent Identifier.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNameIdentifierFormat.Transient">
            <summary>
            Transient Identifier.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNameIdentifierFormat.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNameIdentifierFormat.WindowsDomainQualifiedName">
            <summary>
            Windows Domain Qualified Name.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlNameIdentifierFormat.X509SubjectName">
            <summary>
            X.509 Subject Name.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlPrimaryStatusCode">
            <summary>
            Top level status codes.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.StatusCode" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlPrimaryStatusCode.Requester">
            <summary>
            Requester.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlPrimaryStatusCode.Responder">
            <summary>
            Responder.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlPrimaryStatusCode.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlPrimaryStatusCode.VersionMismatch">
            <summary>
            VersionMismatch.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlProfileType">
            <summary>
            The SAML profiles.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlProfileUri" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.SsoBrowser">
            <summary>
            SSO Browser.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.SsoEcp">
            <summary>
            SSO ECP.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.SsoLogout">
            <summary>
            SSO Logout.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.NameIdManagement">
            <summary>
            Name ID management.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.Artifact">
            <summary>
            Artifact.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.Query">
            <summary>
            Query.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.NameIdMapping">
            <summary>
            Name ID mapping.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.BasicAttribute">
            <summary>
            Basic structure.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.X500">
            <summary>
            X500.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.Uuid">
            <summary>
            Uuid.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.Dce">
            <summary>
            DCE.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileType.Xacml">
            <summary>
            XACML.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlProfileUri">
            <summary>
            The SAML profile URIs.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.Artifact">
            <summary>
            Artifact resolution
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.BasicAttribute">
            <summary>
            Basic attribute
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.Dce">
            <summary>
            DCE PAC attribute
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.NameIdManagement">
            <summary>
            Name identifier management
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.NameIdMapping">
            <summary>
            Name identifier mapping
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.Query">
            <summary>
            Assertion query/request
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.SsoBrowser">
            <summary>
            SSO browser
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.SsoEcp">
            <summary>
            Enhanced client or proxy
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.SsoLogout">
            <summary>
            SSO logout
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.Uuid">
            <summary>
            UUID attribute
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.X500">
            <summary>
            X.500/LDAP attribute
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlProfileUri.Xacml">
            <summary>
            XACML attribute
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SamlProfileUri.ProfileToUri(ComponentPro.Saml2.SamlProfileType)">
            <summary>
            Converts the profile to the corresponding profile URI.
            </summary>
            <param name="profile">The profile.</param>
            <returns>The profile URI.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the profile is invalid.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.SamlProfileUri.UriToProfile(System.String)">
            <summary>
            Converts the profile URI to the corresponding profile.
            </summary>
            <param name="profileUri">The profile URI.</param>
            <returns>The profile.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the profile URI is invalid.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.SamlSecondaryStatusCode">
            <summary>
            Second level status codes.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.StatusCode"/>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.AuthnFailed">
            <summary>
            AuthnFailed.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.InvalidAttrNameOrValue">
            <summary>
            InvalidAttrNameOrValue.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.InvalidNameIdPolicy">
            <summary>
            InvalidNameIDPolicy.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.NoAuthnContext">
            <summary>
            NoAuthnContext.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.NoAvailableIdp">
            <summary>
            NoAvailableIDP.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.NoPassive">
            <summary>
            NoPassive.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.NoSupportedIdp">
            <summary>
            NoSupportedIDP.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.PartialLogout">
            <summary>
            PartialLogout.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.ProxyCountExceeded">
            <summary>
            ProxyCountExceeded.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.RequestDenied">
            <summary>
            RequestDenied.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.RequestUnsupported">
            <summary>
            RequestUnsupported.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.RequestVersionDeprecated">
            <summary>
            RequestVersionDeprecated.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.RequestVersionTooHigh">
            <summary>
            RequestVersionTooHigh.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.RequestVersionTooLow">
            <summary>
            RequestVersionTooLow.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.ResourceNotRecognized">
            <summary>
            ResourceNotRecognized.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.TooManyResponses">
            <summary>
            TooManyResponses.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.UnknownAttrProfile">
            <summary>
            UnknownAttrProfile.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.UnknownPrincipal">
            <summary>
            UnknownPrincipal.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSecondaryStatusCode.UnsupportedBinding">
            <summary>
            UnsupportedBinding.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlSubjectConfirmationMethod">
            <summary>
            Consent identifiers.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SubjectConfirmation" />
        </member>
        <member name="F:ComponentPro.Saml2.SamlSubjectConfirmationMethod.Bearer">
            <summary>
            Bearer.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSubjectConfirmationMethod.HolderOfKey">
            <summary>
            Holder of key.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlSubjectConfirmationMethod.SenderVouches">
            <summary>
            Sender vouches.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SamlKeyAlgorithm">
            <summary>
            Key algorithms.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlKeyAlgorithm.TripleDesCbc">
            <summary>
            TripleDes-Cbc algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlKeyAlgorithm.KwTripleDes">
            <summary>
            KwTripleDes algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlKeyAlgorithm.Aes128Cbc">
            <summary>
            Aes128-Cbc algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlKeyAlgorithm.KwAes128">
            <summary>
            KwAes128 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlKeyAlgorithm.Aes192Cbc">
            <summary>
            Aes192-Cbc algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlKeyAlgorithm.KwAes192">
            <summary>
            KwAes192 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlKeyAlgorithm.Aes256Cbc">
            <summary>
            Aes256Cbc algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.SamlKeyAlgorithm.KwAes256">
            <summary>
            KwAes256 algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.LogoutRequest">
            <summary>
            A session participant or session authority sends a LogoutRequest message to indicate that a session has been terminated.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.#ctor">
            <summary>
            Initializes a new instance of the LogoutRequest class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the LogoutRequest class from an XML.
            </summary>
            <param name="xmlElement">The LogoutRequest XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.Create(System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Extracts and creates a new <see cref="T:ComponentPro.Saml2.LogoutRequest"/> from the query string of the redirect URL.
            </summary>
            <param name="redirectUrl">The redirect url.</param>
            <param name="messageQueryName">The message query string variable name.</param>
            <param name="key">The decryption key.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.LogoutRequest"/>.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.Create(System.Web.HttpRequest,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Extracts and creates a new <see cref="T:ComponentPro.Saml2.LogoutRequest"/> from the query string of the HTTP Request.
            </summary>
            <param name="httpRequest">The HTTP Request object.</param>
            <param name="messageQueryName">The message query string variable name.</param>
            <param name="key">The decryption key.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.LogoutRequest"/>.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.Create(System.Web.HttpRequest,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Extracts and creates a new <see cref="T:ComponentPro.Saml2.LogoutRequest"/> from the query string of the HTTP Request.
            </summary>
            <param name="httpRequest">The HTTP Request object.</param>
            <param name="key">The decryption key.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.LogoutRequest"/>.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.Redirect(System.Web.HttpResponse,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a new URL and redirect to it from the specified base URL, relay state and encryption key.
            </summary>
            <param name="httpResponse">The HTTP Response object.</param>
            <param name="baseUrl">The base URL.</param>
            <param name="relayState">The relay state object.</param>
            <param name="key">The encryption key.</param>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutRequest.Redirect(System.Web.HttpResponse,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Creates a new URL and redirect to it from the specified base URL, relay state and encryption key.
            </summary>
            <param name="httpResponse">The HTTP Response object.</param>
            <param name="baseUrl">The base URL.</param>
            <param name="relayState">The relay state object.</param>
            <param name="key">The encryption key.</param>
            <param name="signatureAlgorithm"></param>
        </member>
        <member name="P:ComponentPro.Saml2.LogoutRequest.BaseId">
            <summary>
            Gets or sets the base identifier.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.LogoutRequest.EncryptedId">
            <summary>
            Gets or sets the encrypted identifier.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.LogoutRequest.NameId">
            <summary>
            Gets or sets the name identifier.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.LogoutRequest.NotOnOrAfter">
            <summary>
            Gets or sets the time at which the request expires, after which the recipient may discard the message. The time value is encoded in UTC.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.LogoutRequest.Reason">
            <summary>
            Gets or sets the reason for the logout, in the form of a URI reference.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.LogoutRequest.SessionIndexes">
            <summary>
            Gets the list of Session Index.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.LogoutRequest.RelayState">
            <summary>
            Gets the relay state extracted by the <b>Create</b> method.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.LogoutResponse">
            <summary>
            Represents the LogoutResponse message.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.#ctor">
            <summary>
            Initializes a new instance of the LogoutResponse class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the LogoutResponse class from an XML.
            </summary>
            <param name="xmlElement">The LogoutResponse XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.Redirect(System.Web.HttpResponse,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a URL from the specified base URL, relay state and encryption key and redirect to it.
            </summary>
            <param name="httpResponse">The HTTP Response object.</param>
            <param name="logoutUrl">The base Logout Url.</param>
            <param name="relayState">The relay state.</param>
            <param name="key">The encryption key.</param>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.Redirect(System.Web.HttpResponse,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Creates a URL from the specified base URL, relay state and encryption key and redirect to it.
            </summary>
            <param name="httpResponse">The HTTP Response object.</param>
            <param name="logoutUrl">The base Logout Url.</param>
            <param name="relayState">The relay state.</param>
            <param name="key">The encryption key.</param>
            <param name="signatureAlgorithm">The signature algorithm or null to default to http://www.w3.org/2000/09/xmldsig#rsa-sha1 or http://www.w3.org/2000/09/xmldsig#dsa-sha1.</param>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.Create(System.Web.HttpRequest,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.LogoutResponse"/> by extracting SAMLResponse query variable name from the specified HTTP Request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="key">The encryption key.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.LogoutResponse"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.Create(System.Web.HttpRequest,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.LogoutResponse"/> by extracting the specified query variable name from the specified HTTP Request.
            </summary>
            <param name="messageQueryName">The message query name.</param>
            <param name="httpRequest">The HTTP request.</param>
            <param name="key">The encryption key.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.LogoutResponse"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.Create(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.LogoutResponse"/> by extracting SAMLResponse query variable name from the specified HTTP Request.
            </summary>
            <param name="redirectUrl">The redirect URL.</param>
            <param name="key">The encryption key.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.LogoutResponse"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.Create(System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Extracts and creates an new instance of the <see cref="T:ComponentPro.Saml2.LogoutResponse"/> class from the specified URL.
            </summary>
            <param name="redirectUrl">The URL to extract logout response.</param>
            <param name="messageQueryName">The message query name.</param>
            <param name="key">The encryption key.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.LogoutResponse"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.LogoutResponse.Create(System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.String@)">
            <summary>
            Extracts and creates an new instance of the <see cref="T:ComponentPro.Saml2.LogoutResponse"/> class from the specified URL.
            </summary>
            <param name="redirectUrl">The URL to extract logout response.</param>
            <param name="messageQueryName">The message query name.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <param name="key">The encryption key.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.LogoutResponse"/> object.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.LogoutResponse.RelayState">
            <summary>
            Gets the relay state extracted by the <b>Create</b> method.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.ManageNameIdRequest">
            <summary>
            Represents the ManageNameIdRequest message.
            </summary>
            <remarks>
            A provider sends a ManageNameIDRequest message to inform the recipient of a changed name identifier or to indicate the termination of the use of a name identifier.
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdRequest.#ctor">
            <summary>
            Initializes a new instance of the ManageNameIdRequest class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdRequest.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ManageNameIdRequest class from an XML.
            </summary>
            <param name="xmlElement">The ManageNameIdRequest XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdRequest.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.ManageNameIdRequest.EncryptedId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.ManageNameIdRequest.EncryptedId"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.ManageNameIdRequest.NameId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.ManageNameIdRequest.NameId"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.ManageNameIdRequest.NewEncryptedId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.ManageNameIdRequest.NewEncryptedId"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.ManageNameIdRequest.NewId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.ManageNameIdRequest.NewId"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.ManageNameIdRequest.Terminate">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.ManageNameIdRequest.Terminate"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.ManageNameIdResponse">
            <summary>
            Represents the ManageNameIdResponse message.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdResponse.#ctor">
            <summary>
            Initializes a new instance of the ManageNameIdResponse class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdResponse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ManageNameIdResponse class from an XML.
            </summary>
            <param name="xmlElement">The ManageNameIdResponse XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdResponse.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdResponse.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ManageNameIdResponse.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AdditionalMetadataLocation">
            <summary>
            The AdditionalMetadataLocation element is a namespace-qualified URI that specifies where additional XML-based metadata may exist for a SAML entity.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AdditionalMetadataLocation.#ctor">
            <summary>
            Initializes a new instance of the AdditionalMetadataLocation class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AdditionalMetadataLocation.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AdditionalMetadataLocation class from an XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AdditionalMetadataLocation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the AdditionalMetadataLocation class.
            </summary>
            <param name="xmlNamespace">The XML namespace.</param>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AdditionalMetadataLocation.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AdditionalMetadataLocation.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AdditionalMetadataLocation.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AdditionalMetadataLocation.XmlNamespace">
            <summary>
            Gets or sets the XML namespace.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AffiliationDescriptor">
            <summary>
            The AffiliationDescriptor element is an alternative to the sequence of role descriptors.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SignableMetadataSaml2Object">
            <summary>
            Represents Signable Metadata SAML2 object.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SignableMetadataSaml2Object.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.SignableMetadataSaml2Object"/> class.
            </summary>
            <param name="element">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.SignableMetadataSaml2Object.DefaultInclusiveNamespacesPrefixList">
            <summary>
            Returns the default inclusive namespaces prefix list.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AffiliationDescriptor.#ctor">
            <summary>
            Initializes a new instance of the AffiliationDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AffiliationDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AffiliationDescriptor class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AffiliationDescriptor.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AffiliationDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AffiliationDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AffiliationDescriptor.Members">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.EntityIdType"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AffiliationDescriptor.OwnerId">
            <summary>
            Gets or sets the the unique identifier of the entity responsible for the affiliation.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AffiliationDescriptor.CacheDuration">
            <summary>
            Gets or sets the optional attribute indicates the maximum length of time a consumer should cache the metadata contained in the element and any contained elements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AffiliationDescriptor.Extensions">
            <summary>
            Gets or sets the optional metadata extensions that are agreed upon between a metadata publisher and consumer.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AffiliationDescriptor.Id">
            <summary>
            Gets or sets the document-unique identifier for the element, typically used as a reference point when signing.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AffiliationDescriptor.KeyDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.KeyDescriptor"/>.
            </summary>
            <remarks>
            Optional sequence of elements that provides information about the cryptographic keys that the
            affiliation uses as a whole, as distinct from keys used by individual members of the affiliation,
            which are published in the metadata for those entities.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AffiliationDescriptor.ValidUntil">
            <summary>
            Gets or sets the expiration time of the metadata contained in the element and any contained elements.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor">
            <summary>
            The AttributeAuthorityDescriptor element extends RoleDescriptor with content 
            reflecting profiles specific to attribute authorities, SAML authorities that respond to AttributeQuery messages.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.RoleDescriptor">
            <summary>
            Represents the RoleDescriptor element.
            </summary>
            <remarks>
            The RoleDescriptor element is an abstract extension point that contains common descriptive
            information intended to provide processing commonality across different roles.
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RoleDescriptor.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RoleDescriptor.#ctor">
            <summary>
            Initializes a new instance of the RoleDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RoleDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the RoleDescriptor class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RoleDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RoleDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RoleDescriptor.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RoleDescriptor.IsTimeValid">
            <summary>
            Checks to see if the current time is past the validUntil time.
            </summary>
            <returns>true if the current time is past the validUntil time; otherwise is false.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RoleDescriptor.CacheDuration">
            <summary>
            Gets or sets the the maximum length of time a consumer should cache the metadata
            contained in the element and any contained elements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RoleDescriptor.ContactPeople">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.ContactPerson"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RoleDescriptor.ErrorUrl">
            <summary>
            Gets or sets the location to direct a user for problem resolution and additional support related to this role.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RoleDescriptor.Extensions">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RoleDescriptor.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RoleDescriptor.KeyDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.KeyDescriptor"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RoleDescriptor.Organization">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.Metadata.RoleDescriptor.Organization"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RoleDescriptor.ProtocolSupportEnumeration">
            <summary>
            Gets or sets the Protocol Support Enumeration.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RoleDescriptor.ValidUntil">
            <summary>
            Gets or sets the expiration time of the metadata contained in the element and any contained elements.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor.#ctor">
            <summary>
            Initializes a new instance of the AttributeAuthorityDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AttributeAuthorityDescriptor class from an XML.
            </summary>
            <param name="xmlElement">The AttributeAuthorityDescriptor XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor.AssertionIdRequestServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.AssertionIdRequestService"/> that describe endpoints that support the profile of
            the Assertion Request protocol defined in [SAMLProf] or the special URI binding for assertion requests defined in [SAMLBind].
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor.AttributeProfiles">
            <summary>
            Gets the list of attribute profile.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor.Attributes">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Attribute"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor.AttributeServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.AttributeService"/> that describe endpoints that support the profile of
            the Attribute Query protocol defined in [SAMLProf]. All attribute authorities support at least one such endpoint, by definition.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor.NameIdFormats">
            <summary>
            Gets the list of name id format.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AttributeConsumingService">
            <summary>
            Defines a particular service offered by the service provider in terms of the attributes the service requires or desires.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeConsumingService.#ctor">
            <summary>
            Initializes a new instance of the AttributeConsumingService class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeConsumingService.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AttributeConsumingService class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeConsumingService.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AttributeConsumingService.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeConsumingService.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeConsumingService.IsDefault">
            <summary>
            Gets or sets the boolean flag indicating the default service supported by the service provider.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeConsumingService.RequestedAttributes">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.RequestedAttribute"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeConsumingService.ServiceDescriptions">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.ServiceDescription"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AttributeConsumingService.ServiceNames">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.ServiceName"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.AuthnAuthorityDescriptor">
            <summary>
            The AuthnAuthorityDescriptor element extends RoleDescriptor with content reflecting 
            profiles specific to authentication authorities, SAML authorities that respond to AuthnQuery messages.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthnAuthorityDescriptor.#ctor">
            <summary>
            Initializes a new instance of the AuthnAuthorityDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthnAuthorityDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AuthnAuthorityDescriptor class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthnAuthorityDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.AuthnAuthorityDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AuthnAuthorityDescriptor.AssertionIdRequestServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.Endpoint"/> that describe endpoints that support the profile of
            the Assertion Request protocol defined in [SAMLProf] or the special URI binding for assertion requests defined in [SAMLBind].
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AuthnAuthorityDescriptor.AuthnQueryServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.Endpoint"/> that describe endpoints that support the profile of
            the Authentication Query protocol defined in [SAMLProf]. All authentication authorities support at
            least one such endpoint, by definition.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.AuthnAuthorityDescriptor.NameIdFormats">
            <summary>
            Gets the list of name identifier format that supported by this authority.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.ContactPerson">
            <summary>
            Specifies basic contact information about a person responsible in some
            capacity for a SAML entity or role. The use of this element is always optional. Its content is informative in
            nature and does not directly map to any core SAML elements or attributes.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.ContactType">
            <summary>
            Represents the ContactType XML element.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.Metadata.ContactType.Administrative">
            <summary>
            Administrative.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.Metadata.ContactType.Billing">
            <summary>
            Billing.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.Metadata.ContactType.Other">
            <summary>
            Other.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.Metadata.ContactType.Support">
            <summary>
            Support.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.Metadata.ContactType.Technical">
            <summary>
            Technical.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ContactType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.ContactType"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ContactType.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Metadata.ContactType"/> class from the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ContactType.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ContactType.Company">
            <summary>
            Gets or sets the name of the company for the contact person.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ContactType.Type">
            <summary>
            Gets or sets the type of contact.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ContactType.EmailAddresses">
            <summary>
            Gets the list of URI representing e-mail addresse belonging to the contact person.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ContactType.Extensions">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.Metadata.ContactType.Extensions"/> object.
            </summary>
            <remarks>
            This contains optional metadata extensions that are agreed upon between a metadata publisher
            and consumer. Extension elements MUST be namespace-qualified by a non-SAML-defined namespace.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ContactType.GivenName">
            <summary>
            Gets or sets the given (first) name of the contact person.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ContactType.Surname">
            <summary>
            Gets or sets the surname of the contact person.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.ContactType.TelephoneNumbers">
            <summary>
            Gets the list of Telephone Number of the contact person.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ContactPerson.#ctor">
            <summary>
            Initializes a new instance of the ContactPerson class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ContactPerson.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ContactPerson class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ContactPerson.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.ContactPerson.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.Duration">
            <summary>
            Represents the SAML Duration type.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Duration.#ctor">
            <summary>
            Initializes a new instance of the Duration class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Duration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Duration class with the specified SAML duration string.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Duration.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the Duration class.
            </summary>
            <param name="negative">Indicates whether the duration is negative.</param>
            <param name="years">The number of years.</param>
            <param name="months">The number of months.</param>
            <param name="days">The number of days.</param>
            <param name="hours">The number of hours.</param>
            <param name="minutes">The number of minutes.</param>
            <param name="seconds">The number of seconds.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Duration.ToString">
            <summary>
            Returns a string that represents the duration.
            </summary>
            <returns>A string that represents the duration.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Duration.Days">
            <summary>
            Gets or sets the number of days.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Duration.Hours">
            <summary>
            Gets or sets the number of hours.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Duration.Minutes">
            <summary>
            Gets or sets the number of minutes.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Duration.Months">
            <summary>
            Gets or sets the number of months.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Duration.Negative">
            <summary>
            Gets or sets the boolean flag indicating whether the duration is negative.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Duration.Seconds">
            <summary>
            Gets or sets the number of seconds.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Duration.Years">
            <summary>
            Gets or sets the number of years.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.EntitiesDescriptor">
            <summary>
            The EntitiesDescriptor element contains the metadata for an optionally named group of SAML entities.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntitiesDescriptor.#ctor">
            <summary>
            Initializes a new instance of the EntitiesDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntitiesDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the EntitiesDescriptor class from an XML.
            </summary>
            <param name="xmlElement">The EntitiesDescriptor XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntitiesDescriptor.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntitiesDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntitiesDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntitiesDescriptor.IsTimeValid">
            <summary>
            Checks to see if the current time is past the validUntil time.
            </summary>
            <returns>true if the current time is past the validUntil time; otherwise is false.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntitiesDescriptor.GetEntityDescriptor(System.String)">
            <summary>
            Gets the entity descriptor identified by the entity ID.
            </summary>
            <param name="entityId">The entity ID of the entity descriptor.</param>
            <returns>The entity descriptor of null if none.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntitiesDescriptor.CacheDuration">
            <summary>
            Gets or sets the maximum length of time a consumer should cache the metadata contained in the element and any contained elements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntitiesDescriptor.EntitiesDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.EntitiesDescriptor"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntitiesDescriptor.EntityDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.EntityDescriptor"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntitiesDescriptor.Extensions">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.Metadata.EntitiesDescriptor.Extensions"/>.
            </summary>
            <remarks>
            This contains optional metadata extensions that are agreed upon between a metadata publisher 
            and consumer. Extension elements MUST be namespace-qualified by a non-SAML-defined namespace.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntitiesDescriptor.Id">
            <summary>
            Gets or sets the document-unique identifier for the element, typically used as a reference point when signing.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntitiesDescriptor.Name">
            <summary>
            Gets or sets the string name that identifies a group of SAML entities in the context of some deployment.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntitiesDescriptor.ValidUntil">
            <summary>
            Gets or sets the expiration time of the metadata contained in the element and any contained elements.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.EntityDescriptor">
            <summary>
            The EntityDescriptor element specifies metadata for a single SAML entity. A single entity may act in many different roles in the support of multiple profiles.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntityDescriptor.#ctor">
            <summary>
            Initializes a new instance of the EntityDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntityDescriptor.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntityDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the EntityDescriptor class.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntityDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntityDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.AdditionalMetadataLocations">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.AdditionalMetadataLocation"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.AffiliationDescriptor">
            <summary>
            Gets or sets the primary content of the element is either a sequence of one or more role descriptor elements,
            or a specialized descriptor that defines an affiliation.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.AttributeAuthorityDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.AttributeAuthorityDescriptor"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.AuthnAuthorityDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.AuthnAuthorityDescriptor"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.CacheDuration">
            <summary>
            Gets or sets the maximum length of time a consumer should cache the metadata
            contained in the element and any contained elements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.ContactPeople">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.ContactPerson"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.EntityId">
            <summary>
            Gets or sets the unique identifier of the SAML entity whose metadata is described by the element's contents.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.Extensions">
            <summary>
            Gets or sets the metadata extensions.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.Id">
            <summary>
            Gets or sets the document-unique identifier for the element, typically used as a reference point when signing.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.IdpSsoDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.IdpSsoDescriptor"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.Organization">
            <summary>
            Gets or sets the organization responsible for the SAML entity described by the element.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.PdpDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.PdpDescriptor"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.RoleDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.RoleDescriptor"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.SpSsoDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.SpSsoDescriptor"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityDescriptor.ValidUntil">
            <summary>
            Gets or sets the expiration time of the metadata contained in the element and any contained elements.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.EntityIdType">
            <summary>
            Represents the EntityIDType
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.Metadata.EntityIdType.MaxLength">
            <summary>
            The maximum length of an entity ID.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntityIdType.#ctor">
            <summary>
            Initializes a new instance of the EntityIdType class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntityIdType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EntityIdType class with the specified URI.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.EntityIdType.ToString">
            <summary>
            Returns a string that represents the entity ID.
            </summary>
            <returns>A string that represents the EntityIDType.</returns>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.EntityIdType.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.Extensions">
            <summary>
            Represents the metadata extensions.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Extensions.#ctor">
            <summary>
            Initializes a new instance of the Extensions class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Extensions.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Extensions class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Extensions.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Extensions.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Extensions.Elements">
            <summary>
            Gets the list of child elements.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.IdpSsoDescriptor">
            <summary>
            Represents the IdpSsoDescriptor.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.SsoDescriptor">
            <summary>
            Represents the SsoDescriptor element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SsoDescriptor.#ctor">
            <summary>
            Initializes a new instance of the SsoDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SsoDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SsoDescriptor class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SsoDescriptor.UpdateXml(System.Xml.XmlElement)">
            <summary>
            Updates the XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.SsoDescriptor.ArtifactResolutionServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.ArtifactResolutionService"/> that support the Artifact Resolution profile defined in [SAMLProf]. The ResponseLocation attribute MUST be omitted.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.SsoDescriptor.ManageNameIdServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.ManageNameIdService"/> that support the Name Identifier Management profiles defined in [SAMLProf].
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.SsoDescriptor.NameIdFormats">
            <summary>
            Gets the list of name id format.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.SsoDescriptor.SingleLogoutServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.SingleLogoutService"/> that support the Single Logout profiles defined in [SAMLProf].
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.#ctor">
            <summary>
            Initializes a new instance of the IdpSsoDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the IdpSsoDescriptor class from an XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.AssertionIdRequestServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.AssertionIdRequestService"/> that support the profile of the Assertion Request protocol defined in 
            [SAMLProf] or the special URI binding for assertion requests defined in [SAMLBind].
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.AttributeProfiles">
            <summary>
            Gets the list of attribute profile.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.Attributes">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Attribute"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.NameIdMappingServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.NameIdMappingService"/> that support the Name 
            Identifier Mapping profile defined in [SAMLProf]. The ResponseLocation attribute MUST be omitted.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.SingleSignOnServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.SingleSignOnService"/> that support the profiles of
            the Authentication Request protocol defined in [SAMLProf]. All identity providers support at least
            one such endpoint, by definition. The ResponseLocation attribute MUST be omitted.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.KeyDescriptors">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.KeyDescriptor"/> that provide information about the cryptographic key(s) that an entity uses
            to sign data or receive encrypted keys, along with additional cryptographic details.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.IdpSsoDescriptor.WantAuthnRequestsSigned">
            <summary>
            Gets or sets the boolean flag indicating a requirement for the AuthnRequest messages
            received by this identity provider to be signed.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.KeyTypes">
            <summary>
            Specified key types.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.Metadata.KeyTypes.Encryption">
            <summary>
            Encryption.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml2.Metadata.KeyTypes.Signing">
            <summary>
            Signing.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.KeyDescriptor">
            <summary>
            The KeyDescriptor element provides information about the cryptographic key(s) that an entity uses
            to sign data or receive encrypted keys, along with additional cryptographic details.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.KeyDescriptor.#ctor">
            <summary>
            Initializes a new instance of the KeyDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.KeyDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the KeyDescriptor class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.KeyDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.KeyDescriptor.GetXml">
            <summary>
            Converts the object into XML data.
            </summary>
            <returns>The converted XML object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.KeyDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.KeyDescriptor.EncryptionMethods">
            <summary>
            Gets the list of encryption method.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.KeyDescriptor.KeyInfo">
            <summary>
            Gets or sets the key info.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.KeyDescriptor.KeyInfoObject">
            <summary>
            Gets or sets the key info.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.KeyDescriptor.Use">
            <summary>
            Gets or sets the purpose of the key being described.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.Organization">
            <summary>
            Represents the basic information about an organization responsible for a SAML entity or role.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Organization.#ctor">
            <summary>
            Initializes a new instance of the Organization class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Organization.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Organization class from an XML element.
            </summary>
            <param name="xmlElement">The Organization XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Organization.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.Organization.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Organization.Extensions">
            <summary>
            Gets or sets the metadata Extensions.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Organization.OrganizationDisplayNames">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.OrganizationDisplayName"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Organization.OrganizationNames">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.OrganizationName"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.Organization.OrganizationUrls">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.OrganizationUrl"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.OrganizationDisplayName">
            <summary>
            Represents the OrganizationDisplayName element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationDisplayName.#ctor">
            <summary>
            Initializes a new instance of the OrganizationDisplayName class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationDisplayName.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the OrganizationDisplayName class.
            </summary>
            <param name="xmlElement">The OrganizationDisplayName XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationDisplayName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the OrganizationDisplayName class.
            </summary>
            <param name="name">The name.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationDisplayName.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationDisplayName.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.OrganizationDisplayName.Name">
            <summary>
            Gets or sets the display name of the organization.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.OrganizationName">
            <summary>
            Represents the OrganizationName class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationName.#ctor">
            <summary>
            Initializes a new instance of the OrganizationName class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationName.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the OrganizationName class from an XML.
            </summary>
            <param name="xmlElement">The OrganizationName XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the OrganizationName class.
            </summary>
            <param name="name"></param>
            <param name="language"></param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationName.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationName.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.OrganizationName.Name">
            <summary>
            Gets or sets the name of the organization.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.OrganizationUrl">
            <summary>
            Represents the OrganizationUrl element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationUrl.#ctor">
            <summary>
            Initializes a new instance of the OrganizationUrl class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationUrl.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the OrganizationUrl class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationUrl.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the OrganizationUrl class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationUrl.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.OrganizationUrl.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.OrganizationUrl.Url">
            <summary>
            Gets or sets the URL of the organization.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.PdpDescriptor">
            <summary>
            Represents the PdpDescriptor element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.PdpDescriptor.#ctor">
            <summary>
            Initializes a new instance of the PdpDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.PdpDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the PdpDescriptor class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.PdpDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.PdpDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.PdpDescriptor.AssertionIdRequestServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.AssertionIdRequestService"/> that support the profile of 
            the Assertion Request protocol defined in [SAMLProf] or the special URI binding for assertion requests defined in [SAMLBind].
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.PdpDescriptor.AuthzServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.AuthzService"/> that support the profile of
            the Authorization Decision Query protocol defined in [SAMLProf]. All policy decision points support
            at least one such endpoint, by definition.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.PdpDescriptor.NameIdFormats">
            <summary>
            Gets the list of Name ID Format.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.RequestedAttribute">
            <summary>
            Specifies a service provider's interest in a specific SAML attribute, optionally including specific values.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RequestedAttribute.#ctor">
            <summary>
            Initializes a new instance of the RequestedAttribute class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RequestedAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RequestedAttribute class with the specified name.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RequestedAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the RequestedAttribute class from an XML element.
            </summary>
            <param name="xmlElement">The RequestedAttribute XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RequestedAttribute.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.RequestedAttribute.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.RequestedAttribute.IsRequired">
            <summary>
            Gets or sets the boolean flag indicating if the service requires the corresponding SAML attribute in order
            to function at all (as opposed to merely finding an attribute useful or desirable).
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Metadata.SpSsoDescriptor">
            <summary>
            Represents the SpSsoDescriptor element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SpSsoDescriptor.#ctor">
            <summary>
            Initializes a new instance of the SpSsoDescriptor class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SpSsoDescriptor.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SpSsoDescriptor class from an XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SpSsoDescriptor.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Metadata.SpSsoDescriptor.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.SpSsoDescriptor.AssertionConsumerServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.IndexedEndpointType"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.SpSsoDescriptor.AttributeConsumingServices">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Metadata.AttributeConsumingService"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.SpSsoDescriptor.AuthnRequestsSigned">
            <summary>
            Gets or sets the boolean flag indicating whether the AuthnRequest messages sent by this service provider will be signed.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Metadata.SpSsoDescriptor.WantAssertionsSigned">
            <summary>
            Gets or sets the boolean flag indicating a requirement for the Assertion elements received by this service provider to be signed.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.NameId">
            <summary>
            Represents the NameID element. It is used in various SAML assertion constructs such as the Subject and SubjectConfirmation elements, and in various protocol messages.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameId.#ctor">
            <summary>
            Initializes a new instance of the NameId class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NameId class with the specified name identifier.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameId.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the NameId class from an XML.
            </summary>
            <param name="xmlElement"></param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.NameId.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.NameId"/> class.
            </summary>
            <param name="nameId">The name ID.</param>
            <param name="nameQualifier">The name qualifier.</param>
            <param name="spNameQualifier">The SP name qualifier.</param>
            <param name="format">The format.</param>
            <param name="spProvidedId">The SP provided ID.</param>
        </member>
        <member name="M:ComponentPro.Saml2.NameId.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.NameId.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.NameIdMappingRequest">
            <summary>
            Represents the NameIdMappingRequest message.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingRequest.#ctor">
            <summary>
            Initializes a new instance of the NameIdMappingRequest class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingRequest.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the NameIdMappingRequest class from an XML.
            </summary>
            <param name="xmlElement">The NameIdMappingRequest XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingRequest.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingRequest.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingRequest.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdMappingRequest.BaseId">
            <summary>
            Gets or sets the identifier and associated descriptive data that specify the principal as currently recognized by the requester and the responder.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdMappingRequest.EncryptedId">
            <summary>
            Gets or sets the identifier and associated descriptive data that specify the principal as currently recognized by the requester and the responder.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdMappingRequest.NameId">
            <summary>
            Gets or sets the identifier and associated descriptive data that specify the principal as currently recognized by the requester and the responder.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdMappingRequest.NameIdPolicy">
            <summary>
            Gets or sets the requirements regarding the format and optional name qualifier for the identifier to be returned.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.NameIdMappingResponse">
            <summary>
            Represents the NameIdMappingResponse message.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingResponse.#ctor">
            <summary>
            Initializes a new instance of the NameIdMappingResponse class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingResponse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the NameIdMappingResponse class from an XML.
            </summary>
            <param name="xmlElement">The NameIdMappingResponse XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingResponse.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingResponse.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdMappingResponse.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdMappingResponse.EncryptedId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.NameIdMappingResponse.EncryptedId"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdMappingResponse.NameId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.NameIdMappingResponse.NameId"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.NameIdPolicy">
            <summary>
            Represents the NameIdPolicy element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdPolicy.#ctor">
            <summary>
            Initializes a new instance of the NameIdPolicy class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdPolicy.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the NameIdPolicy class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdPolicy.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the NameIdPolicy class.
            </summary>
            <param name="format">The URI reference corresponding to a name identifier format defined in this or another specification.</param>
            <param name="spNameQualifier">The assertion subject's identifier be returned (or created) in the namespace of a service provider other than the requester, or in the namespace of an affiliation group of service providers.</param>
            <param name="allowCreate">The boolean value used to indicate whether the identity provider is allowed.</param>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdPolicy.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.NameIdPolicy.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdPolicy.AllowCreate">
            <summary>
            Gets or sets the boolean flag indicating whether the identity provider is allowed.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdPolicy.Format">
            <summary>
            Gets or sets the URI reference corresponding to a name identifier format defined in this or another specification.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlNameIdentifierFormat"/>
        </member>
        <member name="P:ComponentPro.Saml2.NameIdPolicy.SpNameQualifier">
            <summary>
            Gets or sets the assertion subject's identifier be returned (or created) in the namespace of a service provider other than the requester, or in the namespace of an affiliation group of service providers.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.NewEncryptedId">
            <summary>
            Represents the NewEncryptedId element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.#ctor">
            <summary>
            Initializes a new instance of the NewEncryptedId class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the NewEncryptedId class from an XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.#ctor(System.Xml.XmlElement,System.Xml.XmlNodeList)">
            <summary>
            Initializes a new instance of the NewEncryptedId class.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="encryptedKeys">The encrypted keys.</param>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.#ctor(ComponentPro.Saml2.NameId,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the NewEncryptedId class.
            </summary>
            <param name="nameId">The name identifier.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <param name="dataEncryptionMethod">The method used for the data encryption.</param>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.#ctor(ComponentPro.Saml2.NameId,System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo)">
            <summary>
            Initializes a new instance of the NewEncryptedId class.
            </summary>
            <param name="nameId">The name identifier.</param>
            <param name="keyEncryptingKey">The asymmetric key encrypting key.</param>
            <param name="keyInfo">The key info to include with the encrypted data.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
            <param name="dataEncryptionMethod">The method used for the data encryption.</param>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.#ctor(ComponentPro.Saml2.NameId,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the NewEncryptedId class.
            </summary>
            <param name="nameId">The name identifier.</param>
            <param name="x509Certificate">The X509 certificate used for encrypting the data.</param>
            <param name="dataEncryptionMethod">The method used for the data encryption.</param>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.#ctor(ComponentPro.Saml2.NameId,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Initializes a new instance of the NewEncryptedId class.
            </summary>
            <param name="nameId">The name identifier.</param>
            <param name="x509Certificate">The X509 certificate used for encrypting the data.</param>
            <param name="dataEncryptionMethod">The method used for the data encryption.</param>
            <param name="keyEncryptionMethod">The method for encrypting the symmetric key (http://www.w3.org/2001/04/xmlenc#rsa-1_5 or http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p).</param>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <param name="keyDecryptingKey">The asymmetric key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or null if specified in the encrypted data.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.Decrypt(System.Security.Cryptography.AsymmetricAlgorithm,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <param name="keyDecryptingKey">The asymmetric key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or null if specified in the encrypted data.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or null if specified in the encrypted key.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or null if specified in the encrypted data.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.EncryptionMethod)">
            <summary>
            Decrypts an encrypted identifier.
            </summary>
            <param name="x509Certificate">The X.509 certificate containing a private key.</param>
            <param name="dataEncryptionMethod">The method for decrypting the data or null if specified in the encrypted data.</param>
            <param name="keyEncryptionMethod">The method for decrypting the symmetric key or null if specified in the encrypted key.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.NewEncryptedId.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.NewId">
            <summary>
            Represents the new id element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NewId.#ctor">
            <summary>
            Initializes a new instance of the NewId class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.NewId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NewId class.
            </summary>
            <param name="id">The Identifier.</param>
        </member>
        <member name="M:ComponentPro.Saml2.NewId.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the NewId class.
            </summary>
            <param name="xmlElement">The NewId XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.NewId.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.NewId.ToString">
            <summary>
            Returns the ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Saml2.NewId.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.NewId.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.OneTimeUse">
            <summary>
            The OneTimeUse condition element allows an authority to indicate that the information in the assertion is likely to change very soon and fresh information should be obtained for each use.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.OneTimeUse.#ctor">
            <summary>
            Initializes a new instance of the OneTimeUse class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.OneTimeUse.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the OneTimeUse class from an XML.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.OneTimeUse.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.OneTimeUse.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml2.ProxyRestriction">
            <summary>
            Specifies limitations that the asserting party imposes on relying parties that in turn wish to act as asserting
            parties and issue subsequent assertions of their own on the basis of the information contained in the original assertion.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ProxyRestriction.#ctor">
            <summary>
            Initializes a new instance of the ProxyRestriction class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.ProxyRestriction.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the ProxyRestriction class from an XML.
            </summary>
            <param name="xmlElement">The ProxyRestriction XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.ProxyRestriction.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.ProxyRestriction.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.ProxyRestriction.Audiences">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.Audience"/>. It specifies the set of audiences to whom the asserting party permits new assertions to be issued on the basis of this assertion.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.ProxyRestriction.Count">
            <summary>
            Gets or sets the maximum number of indirections that the asserting party permits to exist between this assertion and an assertion which has ultimately been issued on the basis of it.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.RequestedAuthnContext">
            <summary>
            Represents a requested authentication context.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.RequestedAuthnContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.RequestedAuthnContext"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.RequestedAuthnContext.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.RequestedAuthnContext"/> class.
            </summary>
            <param name="xmlElement">The requested authentication context XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.RequestedAuthnContext.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.RequestedAuthnContext.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.RequestedAuthnContext.AuthenticationContexts">
            <summary>
            Gets or sets the authentication contexts.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlAuthenticateContext"/>
            <seealso cref="T:ComponentPro.Saml2.AuthnContextClassRef"/>
        </member>
        <member name="P:ComponentPro.Saml2.RequestedAuthnContext.Comparison">
            <summary>
            Gets or sets the authentication context comparison.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlAuthenticationContextComparison"/>
        </member>
        <member name="T:ComponentPro.Saml2.RequesterId">
            <summary>
            Represents the RequesterId element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.RequesterId.#ctor">
            <summary>
            Initializes a new instance of the RequesterId class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.RequesterId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RequesterId class.
            </summary>
            <param name="id">The requester identifier.</param>
        </member>
        <member name="M:ComponentPro.Saml2.RequesterId.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the RequesterId class from an XML.
            </summary>
            <param name="xmlElement">The RequesterId XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.RequesterId.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.RequesterId.ToString">
            <summary>
            Returns the requester identifier.
            </summary>
            <returns>The requester identifier.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.RequesterId.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.RequesterId.Id">
            <summary>
            Gets or sets the requester identifier.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Response">
            <summary>
            Represents the SAML Response element.
            </summary>
            <remarks>
            The Response message element is used when a response consists of a list of zero or more assertions 
            that satisfy the request.
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml2.Response.#ctor">
            <summary>
            Initializes a new instance of the Response class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Response.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.Response"/> class with the specified base64.
            </summary>
            <param name="base64String">The base 64 string.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Response.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Response class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Response.CreateSignedXml">
            <summary>
            Creates a SAML Signed XML object.
            </summary>
            <returns>The SAML signed xml object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Response.GetAssertions">
            <summary>
            Returns the list of <see cref="T:ComponentPro.Saml2.Assertion"/>.
            </summary>
            <returns>The list of <see cref="T:ComponentPro.Saml2.Assertion"/>.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Response.GetEncryptedAssertions">
            <summary>
            Returns the list of <see cref="T:ComponentPro.Saml2.EncryptedAssertion"/>.
            </summary>
            <returns>The list of <see cref="T:ComponentPro.Saml2.EncryptedAssertion"/>.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Response.GetSignedAssertions">
            <summary>
            Returns the list of signed assertion.
            </summary>
            <returns>The list of signed assertion.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Response.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Response.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Response.Create(System.Web.HttpRequest,System.String)">
            <summary>
            Creates a new Response object by extracting the specified form variable from the specified HTTP Request.
            </summary>
            <param name="httpRequest">The HTTP Request object.</param>
            <param name="messageFormVariableName">The Form Variable.</param>
            <returns>The created <see cref="T:ComponentPro.Saml2.Response"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Response.Create(System.Web.HttpRequest)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Saml2.Response"/> object by extracting the SAMLResponse form variable from the specified HTTP Request.
            </summary>
            <param name="httpRequest">The HTTP Request object.</param>
            <returns>A new <see cref="T:ComponentPro.Saml2.Response"/> object.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Response.SendPostBindingForm(System.IO.Stream,System.String,System.String)">
            <summary>
            Creates a POST form from the specified target url and relay state, and write it to the specified output stream.
            </summary>
            <param name="output">The output stream.</param>
            <param name="targetUrl">The target url.</param>
            <param name="relayState">The relay state.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Response.SendPostBindingForm(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            Creates a POST form from the specified target url and relay state, and write it to the specified output stream.
            </summary>
            <param name="output">The output stream.</param>
            <param name="targetUrl">The target url.</param>
            <param name="messageFormVariableName">The message variable name.</param>
            <param name="relayState">The relay state.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Response.SendPostBindingForm(System.IO.Stream,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a POST form from the specified target url and relay state, and write it to the specified output stream.
            </summary>
            <param name="output">The output stream.</param>
            <param name="targetUrl">The target url.</param>
            <param name="messageFormVariableName">The message variable name.</param>
            <param name="relayState">The relay state.</param>
            <param name="xmlHeader">The header that is added to XML sending to the <paramref name="targetUrl"/>.</param>
        </member>
        <member name="P:ComponentPro.Saml2.Response.Assertions">
            <summary>
            Gets the list of assertion.
            </summary>
            <remarks>
            The list contains items with type of either <see cref="T:ComponentPro.Saml2.Assertion"/> or <see cref="T:ComponentPro.Saml2.EncryptedAssertion"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.Response.RelayState">
            <summary>
            Gets the relay state.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Scoping">
            <summary>
            Represents the Scoping element.
            </summary>
            <remarks>
            The Scoping element specifies the identity providers trusted by the requester to authenticate the
            presenter, as well as limitations and context related to proxying of the AuthnRequest message to
            subsequent identity providers by the responder.
            </remarks>
        </member>
        <member name="M:ComponentPro.Saml2.Scoping.#ctor">
            <summary>
            Initializes a new instance of the Scoping class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Scoping.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Scoping class from an XML element.
            </summary>
            <param name="xmlElement">The Scoping XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Scoping.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Scoping.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Scoping.IdpList">
            <summary>
            Gets or sets the advisory list of identity providers and associated information that the requester deems acceptable
            to respond to the request.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Scoping.ProxyCount">
            <summary>
            Gets or sets the number of proxying indirections permissible between the identity provider that receives
            this AuthnRequest and the identity provider who ultimately authenticates the principal.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Scoping.RequesterIds">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.RequesterId"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SessionIndex">
            <summary>
            Represents the SessionIndex element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SessionIndex.#ctor">
            <summary>
            Initializes a new instance of the SessionIndex class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SessionIndex.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SessionIndex class.
            </summary>
            <param name="index">The session index.</param>
        </member>
        <member name="M:ComponentPro.Saml2.SessionIndex.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SessionIndex class from an XML.
            </summary>
            <param name="xmlElement">The SessionIndex XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.SessionIndex.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.SessionIndex.ToString">
            <summary>
            Returns the session index.
            </summary>
            <returns>The session index.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.SessionIndex.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.SessionIndex.Index">
            <summary>
            Gets or sets the session index.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Status">
            <summary>
            Represents the Status element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Status.#ctor">
            <summary>
            Initializes a new instance of the Status class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Status.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Status class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Status.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Status class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="statusMessage">The status message.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Status.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Status class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="subordinateStatusCode">The subordinate status code</param>
            <param name="statusMessage">The status message.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Status.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Status.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Status.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Status.StatusDetail">
            <summary>
            Gets or sets the status detail.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.Status.StatusMessage">
            <summary>
            Gets or sets the status message.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.StatusCode">
            <summary>
            Represents the status code.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.StatusCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.StatusCode"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.StatusCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.StatusCode"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.StatusCode.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml2.StatusCode"/> from an XML.
            </summary>
            <param name="xmlElement">The StatusCode XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.StatusCode.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.StatusCode.ToString">
            <summary>
            Returns the status code.
            </summary>
            <returns>The status code.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.StatusCode.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.StatusCode.Code">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.StatusCode.SubordinateStatusCode">
            <summary>
            Gets or sets the subordinate status code.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.StatusDetail">
            <summary>
            Initializes a new instance of the 
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.StatusDetail.#ctor">
            <summary>
            Initializes a new instance of the StatusDetail class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.StatusDetail.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the StatusDetail class from XML.
            </summary>
            <param name="xmlElement">The StatusDetail XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.StatusDetail.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.StatusDetail.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.StatusDetail.Details">
            <summary>
            Gets the list of status detail.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.StatusMessage">
            <summary>
            Represents the StatusMessage element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.StatusMessage.#ctor">
            <summary>
            Initializes a new instance of the StatusMessage class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.StatusMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StatusMessage class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.StatusMessage.#ctor(System.Xml.XmlElement)">
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.StatusMessage.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.StatusMessage.ToString">
            <summary>
            Returns the status message.
            </summary>
            <returns>The status message.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.StatusMessage.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.StatusMessage.Message">
            <summary>
            Gets or sets the status message.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Subject">
            <summary>
            The Subject element specifies the principal that is the subject of all of the (zero or more) statements in the assertion.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Subject.#ctor">
            <summary>
            Initializes a new instance of the Subject class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Subject.#ctor(ComponentPro.Saml2.BaseId)">
            <summary>
            Initializes a new instance of the Subject class with the specified <see cref="P:ComponentPro.Saml2.Subject.BaseId"/>.
            </summary>
            <param name="baseId">The <see cref="P:ComponentPro.Saml2.Subject.BaseId"/> object.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Subject.#ctor(ComponentPro.Saml2.EncryptedId)">
            <summary>
            Initializes a new instance of the Subject class with the specified <see cref="P:ComponentPro.Saml2.Subject.EncryptedId"/>.
            </summary>
            <param name="encryptedId">The <see cref="P:ComponentPro.Saml2.Subject.EncryptedId"/> object.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Subject.#ctor(ComponentPro.Saml2.NameId)">
            <summary>
            Initializes a new instance of the Subject class with the specified <see cref="P:ComponentPro.Saml2.Subject.NameId"/>.
            </summary>
            <param name="nameId">The <see cref="P:ComponentPro.Saml2.Subject.NameId"/> object.</param>
        </member>
        <member name="M:ComponentPro.Saml2.Subject.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Subject class.
            </summary>
            <param name="xmlElement">The Subject XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Subject.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Subject.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.Subject.BaseId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.Subject.BaseId"/> object.
            </summary>
            <remarks>
            It identifies the subject.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.Subject.EncryptedId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.Subject.EncryptedId"/> object.
            </summary>
            <remarks>
            It identifies the subject.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.Subject.NameId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.Subject.NameId"/> object.
            </summary>
            <remarks>
            It identifies the subject.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.Subject.SubjectConfirmations">
            <summary>
            Gets the list of <see cref="T:ComponentPro.Saml2.SubjectConfirmation"/>.
            </summary>
            <remarks>
            Information that allows the subject to be confirmed. If more than one subject confirmation is provided, then satisfying any one of them is sufficient to confirm the subject for the purpose of applying the assertion.
            </remarks>
        </member>
        <member name="T:ComponentPro.Saml2.SubjectConfirmation">
            <summary>
            The SubjectConfirmation element provides the means for a relying party to verify the correspondence of the subject of the assertion with the party with whom the relying party is communicating.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmation.#ctor">
            <summary>
            Initializes a new instance of the SubjectConfirmation class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SubjectConfirmation class with the specified method.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmation.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SubjectConfirmation from an XML.
            </summary>
            <param name="xmlElement">The SubjectConfirmation XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmation.#ctor(System.String,ComponentPro.Saml2.BaseId)">
            <summary>
            Initializes a new instance of the SubjectConfirmation class.
            </summary>
            <param name="baseId">The <see cref="P:ComponentPro.Saml2.SubjectConfirmation.BaseId"/> that identifies the entity expected to satisfy the enclosing subject confirmation requirements.</param>
            <param name="method">The URI reference that identifies a protocol or mechanism to be used to confirm the subject.</param>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmation.#ctor(System.String,ComponentPro.Saml2.EncryptedId)">
            <summary>
            Initializes a new instance of the SubjectConfirmation class.
            </summary>
            <param name="encryptedId">The <see cref="P:ComponentPro.Saml2.SubjectConfirmation.EncryptedId"/> that identifies the entity expected to satisfy the enclosing subject confirmation requirements.</param>
            <param name="method">The URI reference that identifies a protocol or mechanism to be used to confirm the subject.</param>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmation.#ctor(System.String,ComponentPro.Saml2.NameId)">
            <summary>
            Initializes a new instance of the SubjectConfirmation class.
            </summary>
            <param name="nameId">The <see cref="P:ComponentPro.Saml2.SubjectConfirmation.NameId"/> that identifies the entity expected to satisfy the enclosing subject confirmation requirements.</param>
            <param name="method">The URI reference that identifies a protocol or mechanism to be used to confirm the subject.</param>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmation.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmation.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmation.BaseId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.SubjectConfirmation.BaseId"/> that identifies the entity expected to satisfy the enclosing subject confirmation requirements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmation.EncryptedId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.SubjectConfirmation.EncryptedId"/> that identifies the entity expected to satisfy the enclosing subject confirmation requirements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmation.Method">
            <summary>
            Gets or sets the URI reference that identifies a protocol or mechanism to be used to confirm the subject.
            </summary>
            <seealso cref="T:ComponentPro.Saml2.SamlSubjectConfirmationMethod"/>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmation.NameId">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Saml2.SubjectConfirmation.NameId"/> that identifies the entity expected to satisfy the enclosing subject confirmation requirements.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmation.SubjectConfirmationData">
            <summary>
            Gets or sets the additional confirmation information to be used by a specific confirmation method.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SubjectConfirmationData">
            <summary>
            Represents the additional confirmation information to be used by a specific confirmation method.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmationData.#ctor">
            <summary>
            Initializes a new instance of the SubjectConfirmation class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmationData.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SubjectConfirmation class from an XML.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmationData.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the SubjectConfirmation class.
            </summary>
            <param name="notBefore">The not before time as coordinated universal time (UTC).</param>
            <param name="notOnOrAfter">The not on or after time as coordinated universal time (UTC).</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmationData.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the SubjectConfirmation class.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
            <param name="timeSpan">The timespan before and after now.</param>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmationData.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectConfirmationData.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmationData.Address">
            <summary>
            Gets or sets the network address/location from which an attesting entity can present the assertion.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmationData.InResponseTo">
            <summary>
            Gets or sets the ID of a SAML protocol message in response to which an attesting entity can present the assertion.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmationData.KeyInfo">
            <summary>
            Gets or sets the key info.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmationData.NotBefore">
            <summary>
            Gets or sets the time instant before which the subject cannot be confirmed. The time value is encoded in UTC.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmationData.NotOnOrAfter">
            <summary>
            Gets or sets the time instant at which the subject can no longer be confirmed. The time value is encoded in UTC.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectConfirmationData.Recipient">
            <summary>
            Gets or sets the URI specifying the entity or location to which an attesting entity can present the assertion.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.SubjectLocality">
            <summary>
            Specifies the DNS domain name and IP address for the system from which the assertion subject was authenticated.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectLocality.#ctor">
            <summary>
            Initializes a new instance of the SubjectLocality class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectLocality.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the SubjectLocality class.
            </summary>
            <param name="xmlElement">The SubjectLocality XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectLocality.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.SubjectLocality.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectLocality.Address">
            <summary>
            Gets or sets the network address of the system from which the principal identified by the subject was authenticated.
            </summary>
            <remarks>
            IPv4 addresses SHOULD be represented in dotted-decimal format (e.g., "1.2.3.4").
            IPv6 addresses SHOULD be represented as defined by Section 2.2 of IETF RFC 3513 [RFC 3513] (e.g., "FEDC:BA98:7654:3210:FEDC:BA98:7654:3210").
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml2.SubjectLocality.DnsName">
            <summary>
            Gets or sets the DNS name of the system from which the principal identified by the subject was authenticated.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml2.Terminate">
            <summary>
            Represents the Terminate element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Terminate.#ctor">
            <summary>
            Initializes a new instance of the Terminate class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml2.Terminate.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Terminate class from an XML.
            </summary>
            <param name="xmlElement">The Terminate XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml2.Terminate.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml2.Terminate.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML deserialization fails.
            </exception>
        </member>
        <member name="T:ComponentPro.Saml.HttpCacheProvider">
            <summary>
            Represents HTTP Cache provider.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml.ISamlCacheProvider">
            <summary>
            Defines generalized SAML cache provider.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.ISamlCacheProvider.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Adds the specified item to the System.Web.Caching.Cache object with dependencies,
            expiration and priority policies, and a delegate you can use to notify your
            application when the inserted item is removed from the Cache.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="value">The item to be added to the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <param name="absoluteExpiration">The time at which the added object expires and is removed from the cache. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
            <param name="slidingExpiration">The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed. If you are using absolute expiration, the slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.</param>
            <param name="priority">The relative cost of the object, as expressed by the System.Web.Caching.CacheItemPriority enumeration. The cache uses this value when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
            <param name="onRemoveCallback">A delegate that, if provided, is called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
            <returns>An System.Object if the item was previously stored in the Cache; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">The key or value parameter is set to null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The slidingExpiration parameter is set to less than TimeSpan.Zero or more than one year.</exception>
            <exception cref="T:System.ArgumentException">The absoluteExpiration and slidingExpiration parameters are both set for the item you are trying to add to the Cache.</exception>
        </member>
        <member name="M:ComponentPro.Saml.ISamlCacheProvider.Get(System.String)">
            <summary>
            Retrieves the specified item from the System.Web.Caching.Cache object.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or null if the key is not found.</returns>
        </member>
        <member name="M:ComponentPro.Saml.ISamlCacheProvider.GetEnumerator">
            <summary>
            Retrieves a dictionary enumerator used to iterate through the key settings and their values contained in the cache.
            </summary>
            <returns>An enumerator to iterate through the System.Web.Caching.Cache object.</returns>
        </member>
        <member name="M:ComponentPro.Saml.ISamlCacheProvider.Remove(System.String)">
            <summary>
            Removes the specified item from the application's System.Web.Caching.Cache object.
            </summary>
            <param name="key">A System.String identifier for the cache item to remove.</param>
            <returns>The item removed from the Cache. If the value in the key parameter is not found, returns null.</returns>
        </member>
        <member name="M:ComponentPro.Saml.ISamlCacheProvider.Insert(System.String,System.Object)">
            <summary>
            Inserts an item into the System.Web.Caching.Cache object with a cache key
            to reference its location, using default values provided by the System.Web.Caching.CacheItemPriority
            enumeration.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
        </member>
        <member name="M:ComponentPro.Saml.ISamlCacheProvider.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            Inserts an object into the System.Web.Caching.Cache that has file or key dependencies.
            </summary>
            <param name="key">The cache key used to identify the item.</param>
            <param name="value">The object to be inserted in the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <exception cref="T:System.ArgumentNullException">The key or value parameter is null.</exception>
        </member>
        <member name="M:ComponentPro.Saml.ISamlCacheProvider.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)">
            <summary>
            Inserts an object into the System.Web.Caching.Cache with dependencies and expiration policies.
            </summary>
            <param name="key">The cache key used to reference the object.</param>
            <param name="value">The object to be inserted in the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. To avoid possible issues with local time such as changes from standard time to daylight time, use System.DateTime.UtcNow rather than System.DateTime.Now for this parameter value. If you are using absolute expiration, the slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.</param>
            <param name="slidingExpiration">The interval between the time the inserted object is last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
        </member>
        <member name="M:ComponentPro.Saml.ISamlCacheProvider.Insert(System.String,System.Object,System.TimeSpan)">
            <summary>
            Inserts an object into the System.Web.Caching.Cache with dependencies and expiration policies.
            </summary>
            <param name="key">The cache key used to reference the object.</param>
            <param name="value">The object to be inserted in the cache.</param>
            <param name="slidingExpiration">The interval between the time the inserted object is last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
        </member>
        <member name="M:ComponentPro.Saml.ISamlCacheProvider.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Inserts an object into the System.Web.Caching.Cache object with dependencies, expiration and priority policies, and a delegate you can use to notify your application when the inserted item is removed from the Cache.
            </summary>
            <param name="key">The cache key used to reference the object.</param>
            <param name="value">The object to be inserted in the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. To avoid possible issues with local time such as changes from standard time to daylight time, use System.DateTime.UtcNow rather than System.DateTime.Now for this parameter value. If you are using absolute expiration, the slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.</param>
            <param name="slidingExpiration">The interval between the time the inserted object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
            <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the System.Web.Caching.CacheItemPriority enumeration. This value is used by the cache when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
            <param name="onRemoveCallback">A delegate that, if provided, will be called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
        </member>
        <member name="P:ComponentPro.Saml.ISamlCacheProvider.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
            <value>The number of items stored in the cache.</value>
        </member>
        <member name="P:ComponentPro.Saml.ISamlCacheProvider.Item(System.String)">
            <summary>
            Gets or sets the cache item at the specified key.
            </summary>
            <param name="key">A System.String object that represents the key for the cache item.</param>
            <returns>The specified cache item.</returns>
        </member>
        <member name="M:ComponentPro.Saml.HttpCacheProvider.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Adds the specified item to the System.Web.Caching.Cache object with dependencies,
            expiration and priority policies, and a delegate you can use to notify your
            application when the inserted item is removed from the Cache.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="value">The item to be added to the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <param name="absoluteExpiration">The time at which the added object expires and is removed from the cache. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
            <param name="slidingExpiration">The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed. If you are using absolute expiration, the slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.</param>
            <param name="priority">The relative cost of the object, as expressed by the System.Web.Caching.CacheItemPriority enumeration. The cache uses this value when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
            <param name="onRemoveCallback">A delegate that, if provided, is called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
            <returns>An System.Object if the item was previously stored in the Cache; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">The key or value parameter is set to null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The slidingExpiration parameter is set to less than TimeSpan.Zero or more than one year.</exception>
            <exception cref="T:System.ArgumentException">The absoluteExpiration and slidingExpiration parameters are both set for the item you are trying to add to the Cache.</exception>
        </member>
        <member name="M:ComponentPro.Saml.HttpCacheProvider.Get(System.String)">
            <summary>
            Retrieves the specified item from the System.Web.Caching.Cache object.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or null if the key is not found.</returns>
        </member>
        <member name="M:ComponentPro.Saml.HttpCacheProvider.GetEnumerator">
            <summary>
            Retrieves a dictionary enumerator used to iterate through the key settings and their values contained in the cache.
            </summary>
            <returns>An enumerator to iterate through the System.Web.Caching.Cache object.</returns>
        </member>
        <member name="M:ComponentPro.Saml.HttpCacheProvider.Remove(System.String)">
            <summary>
            Removes the specified item from the application's System.Web.Caching.Cache object.
            </summary>
            <param name="key">A System.String identifier for the cache item to remove.</param>
            <returns>The item removed from the Cache. If the value in the key parameter is not found, returns null.</returns>
        </member>
        <member name="M:ComponentPro.Saml.HttpCacheProvider.Insert(System.String,System.Object)">
            <summary>
            Inserts an item into the System.Web.Caching.Cache object with a cache key
            to reference its location, using default values provided by the System.Web.Caching.CacheItemPriority
            enumeration.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
        </member>
        <member name="M:ComponentPro.Saml.HttpCacheProvider.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            Inserts an object into the System.Web.Caching.Cache that has file or key dependencies.
            </summary>
            <param name="key">The cache key used to identify the item.</param>
            <param name="value">The object to be inserted in the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <exception cref="T:System.ArgumentNullException">The key or value parameter is null.</exception>
        </member>
        <member name="M:ComponentPro.Saml.HttpCacheProvider.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)">
            <summary>
            Inserts an object into the System.Web.Caching.Cache with dependencies and expiration policies.
            </summary>
            <param name="key">The cache key used to reference the object.</param>
            <param name="value">The object to be inserted in the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. To avoid possible issues with local time such as changes from standard time to daylight time, use System.DateTime.UtcNow rather than System.DateTime.Now for this parameter value. If you are using absolute expiration, the slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.</param>
            <param name="slidingExpiration">The interval between the time the inserted object is last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
        </member>
        <member name="M:ComponentPro.Saml.HttpCacheProvider.Insert(System.String,System.Object,System.TimeSpan)">
            <summary>
            Inserts an object into the System.Web.Caching.Cache object with dependencies, expiration and priority policies, and a delegate you can use to notify your application when the inserted item is removed from the Cache.
            </summary>
            <param name="key">The cache key used to reference the object.</param>
            <param name="value">The object to be inserted in the cache.</param>
            <param name="slidingExpiration">The interval between the time the inserted object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
        </member>
        <member name="M:ComponentPro.Saml.HttpCacheProvider.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Inserts an object into the System.Web.Caching.Cache object with dependencies, expiration and priority policies, and a delegate you can use to notify your application when the inserted item is removed from the Cache.
            </summary>
            <param name="key">The cache key used to reference the object.</param>
            <param name="value">The object to be inserted in the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. To avoid possible issues with local time such as changes from standard time to daylight time, use System.DateTime.UtcNow rather than System.DateTime.Now for this parameter value. If you are using absolute expiration, the slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.</param>
            <param name="slidingExpiration">The interval between the time the inserted object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
            <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the System.Web.Caching.CacheItemPriority enumeration. This value is used by the cache when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
            <param name="onRemoveCallback">A delegate that, if provided, will be called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
        </member>
        <member name="P:ComponentPro.Saml.HttpCacheProvider.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
            <value>The number of items stored in the cache.</value>
        </member>
        <member name="P:ComponentPro.Saml.HttpCacheProvider.Item(System.String)">
            <summary>
            Gets or sets the cache item at the specified key.
            </summary>
            <param name="key">A System.String object that represents the key for the cache item.</param>
            <returns>The specified cache item.</returns>
        </member>
        <member name="T:ComponentPro.Saml.SamlSettings">
            <summary>
            Contains settings for the SAML component.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlSettings.IdentifierGenerator">
            <summary>
            Gets or sets the SAML ID generator.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlSettings.CacheProvider">
            <summary>
            Gets or sets the SAML Cache provider.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlSettings.MillisecondPrecision">
            <summary>
            Gets or sets the flag indicating whether or not times should have millisecond precision when being serialized to XML. 
            For example, a time with millisecond precision is 06:33:14.729 whereas a time without millisecond precision is 06:33:14. 
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Status">
            <summary>
            Represents the status.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Status.#ctor">
            <summary>
            Initializes a new instance of the Status class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Status.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Status class with the specified code.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Status.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Statuc class from an XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Status.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Status class.
            </summary>
            <param name="code">The status code.</param>
            <param name="message">The status message.</param>
        </member>
        <member name="M:ComponentPro.Saml1.Status.IsSuccess">
            <summary>
            Indicates whether the status is success or not.
            </summary>
            <returns>True if success; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Status.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.Status.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.Status.StatusCode">
            <summary>
            Gets or sets the code representing the status of the corresponding request.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Status.StatusDetail">
            <summary>
            Gets or sets the additional information concerning an error condition.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Status.StatusMessage">
            <summary>
            Gets or sets the message which MAY be returned to an operator.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.StatusCodes">
            <summary>
            Defines status codes.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.RequestDenied">
            <summary>
            Request denied.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.Requester">
            <summary>
            Requester.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.RequestVersionDeprecated">
            <summary>
            Request version deprecated.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.RequestVersionTooHigh">
            <summary>
            Request version too high.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.RequestVersionTooLow">
            <summary>
            Request version too low.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.ResourceNotRecognized">
            <summary>
            Resource not recognized.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.Responder">
            <summary>
            Responder.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.TooManyResponses">
            <summary>
            Too many responses.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml1.StatusCodes.VersionMismatch">
            <summary>
            Version mismatch.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.StatusCode">
            <summary>
            The StatusCode element specifies one or more possibly nested, codes representing the status of the corresponding request.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.StatusCode.#ctor">
            <summary>
            Initializes a new instance of the StatusCode class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.StatusCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StatusCode class with the specified code.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.StatusCode.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the StatusCode class from an XML element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.StatusCode.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.StatusCode.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.StatusCode.Code">
            <summary>
            Gets or sets the statuc code.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.StatusCodes"/>
        </member>
        <member name="P:ComponentPro.Saml1.StatusCode.SubordinateStatusCode">
            <summary>
            Gets or sets the subordinate status code that provides more specific information on an error condition.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.StatusDetail">
            <summary>
            The StatusDetail element MAY be used to specify additional information concerning an error condition.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.StatusDetail.#ctor">
            <summary>
            Initializes a new instance of the StatusDetail class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.StatusDetail.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the StatusDetail class from an XML element.
            </summary>
            <param name="xmlElement"></param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.StatusDetail.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.StatusDetail.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.StatusDetail.Details">
            <summary>
            Gets or sets the status detail.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.StatusMessage">
            <summary>
            The StatusMessage element specifies a message that MAY be returned to an operator.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.StatusMessage.#ctor">
            <summary>
            Initializes a new instance of the StatusMessage class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.StatusMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StatusMessage class from a specified message.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.StatusMessage.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the StatusMessage class from a specified Xml Element.
            </summary>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.StatusMessage.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.StatusMessage.ToString">
            <summary>
            Returns message.
            </summary>
            <returns>Status messages.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.StatusMessage.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.StatusMessage.Message">
            <summary>
            Gets or sets the status _message.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.Subject">
            <summary>
            The Subject element specifies the principal that is the subject of the statement.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Subject.#ctor">
            <summary>
            Initializes a new instance of the Subject class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.Subject.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the Subject class from an XML element.
            </summary>
            <param name="xmlElement">The xml element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Subject.#ctor(ComponentPro.Saml1.NameIdentifier,ComponentPro.Saml1.SubjectConfirmation)">
            <summary>
            Initializes a new instance of the Subject class.
            </summary>
            <param name="nameIdentifier"></param>
            <param name="subjectConfirmation"></param>
        </member>
        <member name="M:ComponentPro.Saml1.Subject.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.Subject.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
        </member>
        <member name="P:ComponentPro.Saml1.Subject.NameIdentifier">
            <summary>
            Gets or sets the identification of a subject by its name and security domain.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.Subject.SubjectConfirmation">
            <summary>
            Gets or sets the information that allows the subject to be authenticated.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.SubjectConfirmation">
            <summary>
            The <see cref="T:ComponentPro.Saml1.SubjectConfirmation"/> element specifies a subject by supplying data that allows the subject to be authenticated.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmation.#ctor">
            <summary>
            Initializes a new instance of the SubjectConfirmation class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.SubjectConfirmation"/> class with the specified confirmation method.
            </summary>
            <param name="confirmationMethod">The confirmation method.</param>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmation.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml1.SubjectConfirmation"/> class from an XML element.
            </summary>
            <param name="xmlElement">The xml element.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmation.IsValid(System.Xml.XmlElement)">
            <summary>
            Inidicates whether the element is valid or not.
            </summary>
            <param name="xmlElement">The Xml Element object.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmation.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.SubjectConfirmation.ConfirmationMethods">
            <summary>
            Gets or sets the list of <see cref="T:ComponentPro.Saml1.ConfirmationMethod"></see>.
            </summary>
            <remarks>
            ConfirmationMethod is a URI reference that identifies a protocol to be used to authenticate the subject. URI references
            identifying SAML-defined confirmation methods are currently defined with the SAML profiles in the 
            SAML bindings and profiles specification [SAMLBind]. Additional methods may be added by defining 
            new profiles or by private agreement.
            </remarks>
        </member>
        <member name="P:ComponentPro.Saml1.SubjectConfirmation.KeyInfo">
            <summary>
            Gets or sets the XML Signature [XMLSig] element that provides access to a cryptographic key held by the subject.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.SubjectConfirmation.SubjectConfirmationData">
            <summary>
            Gets or sets the additional authentication information to be used by a specific authentication protocol.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml1.SubjectConfirmationData">
            <summary>
            Represents the additional authentication information to be used by a specific authentication protocol.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmationData.#ctor">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmationData</c> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmationData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmationData</c> class.
            </summary>
            <param name="data">The subject confirmation data.</param>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmationData.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <c>SubjectConfirmationData</c> class from XML.
            </summary>
            <param name="xmlElement">The subject confirmation data XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmationData.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XML is subject confirmation data.
            </summary>
            <param name="xmlElement">The XML to test.</param>
            <returns><c>true</c> if the XML is subject confirmation data; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectConfirmationData.GetXml(System.Xml.XmlDocument)">
            <summary>
            Serializes the subject confirmation data to XML.
            </summary>
            <param name="xmlDocument">The owning XML document.</param>
            <returns>The subject confirmation data as XML.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when the XML serialization fails.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.SubjectConfirmationData.Data">
            <summary>
            Gets or sets the data. 
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:ComponentPro.Saml1.SubjectLocality">
            <summary>
            Specifies the DNS domain name and IP address for the system entity from which the subject was apparently authenticated.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectLocality.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectLocality.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the class from an XmlElement object.
            </summary>
            <param name="xmlElement">The subject locality XML.</param>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectLocality.IsValid(System.Xml.XmlElement)">
            <summary>
            Indicates whether the XmlElement object is valid or not.
            </summary>
            <param name="xmlElement">The subject locality XML.</param>
            <returns>True if valid; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Saml1.SubjectLocality.GetXml(System.Xml.XmlDocument)">
            <summary>
            Converts the object into XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The converted XML object.</returns>
            <exception cref="T:ComponentPro.Saml.SamlException">
            Thrown when there is a problem while processing XML data.
            </exception>
        </member>
        <member name="P:ComponentPro.Saml1.SubjectLocality.DnsAddress">
            <summary>
            Gets or sets the DNS address of the system entity that was authenticated.
            </summary>
        </member>
        <member name="P:ComponentPro.Saml1.SubjectLocality.Address">
            <summary>
            Gets or set the IP address of the system entity that was authenticated.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml.SamlExceptionStatus">
            <summary>Defines error codes for the SAML classes.</summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.Success">
            <summary>The operation succeeded.</summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendSaml">
            <summary>
            Failed to send SAML request over SOAP.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAction">
            <summary>
            The XML element is not an Action.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAdvice">
            <summary>
            The XML element is not an Advice.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.InvalidXmlData">
            <summary>
            Unable to parse this XML data. This is not a valid SAML v1.1 Assertion.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertVersionNumber">
            <summary>
            Failed to convert version number to an integer.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAAssertionIdReference">
            <summary>
            The XML element is not a SAML AssertionIDReference.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.MissingTheAssertionId">
            <summary>
            The assertion ID is missing.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAttribute">
            <summary>
            The XML element is not an Attribute.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASubjectConfirmationData">
            <summary>
            The XML element is not a SubjectConfirmationData.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAttributeDesignator">
            <summary>
            The XML element is not an AttributeDesignator.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAttributeStatement">
            <summary>
            The XML element is not an AttributeStatement.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSerializeAttributeValue">
            <summary>
            Failed to serialize attribute value.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAttributeValue">
            <summary>
            The XML element is not an AttributeValue.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToDeserialize">
            <summary>
            Failed to deserialize attribute value.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAudience">
            <summary>
            The XML element is not an Audience.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAudienceRestrictionCondition">
            <summary>
            The XML element is not an AudienceRestrictionCondition.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.AuthenticationStatement">
            <summary>
            The XML element is not an AuthenticationStatement.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthorityBinding">
            <summary>
            The XML element is not an AuthorityBinding.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthorizationDecisionStatement">
            <summary>
            The XML element is not an AuthorizationDecisionStatement.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.InvalidXmlDecisionAttributeValue">
            <summary>
            The XML decision attribute value is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotConditions">
            <summary>
            The XML element is not Conditions.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAConfirmationMethod">
            <summary>
            The XML element is not a ConfirmationMethod.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotACacheCondition">
            <summary>
            The XML element is not a CacheCondition.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnEvidence">
            <summary>
            The XML element is not an Evidence.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotANameIdentifier">
            <summary>
            The XML element is not a NameIdentifier.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASubject">
            <summary>
            The XML element is not a Subject.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASubjectConfirmation">
            <summary>
            The XML element is not a SubjectConfirmation.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASubjectLocality">
            <summary>
            The XML element is not a subject locality.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASoapMessage">
            <summary>
            The XML element is not a SOAP message.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.SoapBodyIsMissing">
            <summary>
            The SOAP body is missing.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.SoapBodyIsEmpty">
            <summary>
            The SOAP body is empty.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.InvalidSoapVersionNumber">
            <summary>
            Invalid SOAP version number.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.SourceIdLengthIsInvalid">
            <summary>
            The source identifier length is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.AssertionHandleLengthIsInvalid">
            <summary>
            The assertion handle length is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.ArtifactLengthIsInvalid">
            <summary>
            The artifact length is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.ArtifactTypeCodeIsInvalid">
            <summary>
            The artifact type code is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAStatusCode">
            <summary>
            The XML element is not a status code.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToCreateX509CertificateCollection">
            <summary>
            Failed to create X.509 certificate collection.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToCreateKeyInfoUsingX509Certificate">
            <summary>
            Failed to create key info using X.509 certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToGenerateXmlSignature">
            <summary>
            Failed to generate XML signature.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToCreateKeyInfoUsingX509Data">
            <summary>
            Failed to create key info using X.509 data.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToExtractX509Certificate">
            <summary>
            Failed to extract X.509 certificate from XML.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToExtractKeyInfoFromXml">
            <summary>
            Failed to extract key info from XML.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.NoSigningKey">
            <summary>
            No signing key could be found in the key info.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToCreateKeyInfoUsingSigningKey">
            <summary>
            Failed to create key info using signing key.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.TheXmlDoesNotContainAnSignature">
            <summary>
            The XML does not contain a signature.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToVerifyTheXmlSignature">
            <summary>
            Failed to verify the XML signature.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAStatusDetail">
            <summary>
            The XML element is not a status detail.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthenticationQuery">
            <summary>
            The XML element is not an authentication query.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASamlv11RequestMessage">
            <summary>
            The XML element is not a SAML v1.1 request message.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASamlv11ResponseMessage">
            <summary>
            The XML element is not a SAML v1.1 response message.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthorizationDecisionQuery">
            <summary>
            The XML element is not an authorization decision query.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAttributeQuery">
            <summary>
            The XML element is not an attribute query.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAStatusMessage">
            <summary>
            The XML element is not a status message.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotARespondWith">
            <summary>
            The XML element is not a respond with.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.MissingTheResponseId">
            <summary>
            The response ID is missing.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.MissingTheRequestId">
            <summary>
            The request ID is missing.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAStatus">
            <summary>
            The XML element is not a status.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAssertionArtifact">
            <summary>
            The XML element is not an assertion artifact.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertFromBase64String">
            <summary>
            Failed to convert from base 64 string.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertToDateTime">
            <summary>
            Failed to convert text to date/time.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASaml20Assertion">
            <summary>
            The XML is not a SAML v2.0 assertion.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAssertionIdRef">
            <summary>
            The XML is not an AssertionIDRef.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.SamlAssertionDoesNotContainAnIssuer">
            <summary>
            The signature cannot be added as the SAML assertion doesn't contain an Issuer.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthenticatingAuthority">
            <summary>
            The XML is not an AuthenicatingAuthority.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthenticationContext">
            <summary>
            The XML is not an authentication context.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthnContextDecl">
            <summary>
            The XML is not an AuthnContextDecl.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthnContextDeclRef">
            <summary>
            The XML is not an AuthnContextDecl.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthnStatement">
            <summary>
            The XML is not an AuthnStatement.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthzDecisionStatement">
            <summary>
            The XML is not an AuthzDecisionStatement.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthnContextClassRef">
            <summary>
            The XML is not an AuthnContextClassRef.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotABaseId">
            <summary>
            The XML is not a BaseId.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnEncryptedAssertion">
            <summary>
            The XML is not an EncryptedAssertion.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnEncryptedAttribute">
            <summary>
            The XML is not an EncryptedAttribute.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAOneTimeUse">
            <summary>
            The XML is not a OneTimeUse.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnEncryptedId">
            <summary>
            The XML is not an EncryptedId.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotANewEncryptedId">
            <summary>
            The XML is not a NewEncryptedID.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAProxyRestriction">
            <summary>
            The XML is not a ProxyRestriction.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertCount">
            <summary>
            Failed to convert count to an integer.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.KeyTypeIsNotSupported">
            <summary>
            The key type is not supported.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAdditionalMetadataLocation">
            <summary>
            The XML is not an additional metadata location.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAffiliationDescriptor">
            <summary>
            The XML is not an affiliation descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAAttributeAuthorityDescriptor">
            <summary>
            The XML is not a attribute authority descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAttributeConsumingService">
            <summary>
            The XML is not an attribute consuming service.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertIndexToInteger">
            <summary>
            Failed to convert index to integer.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthenticatingAuthorityDescriptor">
            <summary>
            The XML is not an authentication authority descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnEntitiesDescriptor">
            <summary>
            The XML is not an entities descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertTextToDuration">
            <summary>
            Failed to convert text to duration.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnEntityDescriptor">
            <summary>
            The XML is not an entity descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.EntityIdUriIsTooLong">
            <summary>
            The entity ID URI is too long.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnExtensions">
            <summary>
            The XML is not an extensions.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnIdpSsoDescriptor">
            <summary>
            The XML is not an IdP SSO descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAKeyDescriptor">
            <summary>
            The XML is not a key descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnOrganization">
            <summary>
            The XML is not an organization.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnOrganizationDisplayName">
            <summary>
            The XML is not an organization display name.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnOrganizationName">
            <summary>
            The XML is not an organization name.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnOrganizationUrl">
            <summary>
            The XML is not an organization URL.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAPdpDescriptor">
            <summary>
            The XML is not a PDP descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotARequestedAttribute">
            <summary>
            The XML is not a requested attribute.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotARoleDescriptor">
            <summary>
            The XML is not a role descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.MissingId">
            <summary>
            Missing ID.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnSpSsoDescriptor">
            <summary>
            The XML is not an SP SSO descriptor.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnArtifact">
            <summary>
            The XML is not an Artifact.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnArtifactResponse">
            <summary>
            The XML is not an ArtifactResponse.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAssertionIdRequest">
            <summary>
            The XML is not an assertion ID request.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthenticationRequest">
            <summary>
            The XML is not an authentication request.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthenticationDecisionQuery">
            <summary>
            The XML is not an authorization decision query.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotALogoutRequest">
            <summary>
            The XML is not a LogoutRequest.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotALogoutResponse">
            <summary>
            The XML is not a LogoutResponse.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnIdpEntry">
            <summary>
            The XML is not an IDPEntry.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAGetComplete">
            <summary>
            The XML is not a GetComplete.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnIdpList">
            <summary>
            The XML is not an IDPList.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAManageNameIdRequest">
            <summary>
            The XML is not a ManageNameIDRequest.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAManageNameIdResponse">
            <summary>
            The XML is not an ManageNameIDResponse.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotANameIdMappingRequest">
            <summary>
            The XML is not a NameIDMappingRequest.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotANameIdMappingResponse">
            <summary>
            The XML is not a NameIDMappingResponse.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotANameIdPolicy">
            <summary>
            The XML is not a NameIDPolicy.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotANewId">
            <summary>
            The XML is not a NewID.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotRequesterId">
            <summary>
            The XML is not a RequesterID.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.MissingSamlMessageId">
            <summary>
            The SAML message ID is missing.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAScoping">
            <summary>
            The XML is not a Scoping.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertProxyCountToInteger">
            <summary>
            Failed to convert ProxyCount to integer.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASessionIndex">
            <summary>
            The XML is not a SessionIndex.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASubjectQuery">
            <summary>
            The XML is not a SubjectQuery.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotATerminate">
            <summary>
            The XML is not a Terminate.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertToBoolean">
            <summary>
            Failed to convert text to boolean {0}.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnArtifactResolve">
            <summary>
            The XML is not an ArtifactResolve.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASamlResponse">
            <summary>
            The XML is not a SAMLResponse.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAContactPerson">
            <summary>
            The XML is not a contact person.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToReceiveLogoutResponse">
            <summary>
            Failed to receive logout response by HTTP post.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToReceiveArtifactResolveRequest">
            <summary>
            Failed to receive artifact resolve request.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendArtifactResponse">
            <summary>
            Failed to send artifact response.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendReceiveArtifactRequestResponse">
            <summary>
            Failed to send/receive artifact request/response.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendLogoutRequest">
            <summary>
            Failed to send logout request by HTTP post.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendArtifact">
            <summary>
            Failed to send artifact by HTTP artifact.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendReceiveRequestResponseBySoap">
            <summary>
            Failed to send/receive logout request/response by SOAP.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendLogoutResponse">
            <summary>
            Failed to send logout response.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToReceiveArtifact">
            <summary>
            Failed to receive artifact.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToReceiveLogoutMessage">
            <summary>
            Failed to receive logout message.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToReceiveLogoutRequest">
            <summary>
            Failed to receive logout request.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToEncryptSamlAssertion">
            <summary>
            Failed to encrypt SAML assertion.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToDecryptSamlAssertion">
            <summary>
            Failed to decrypt SAML assertion.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToEncryptSamlAttribute">
            <summary>
            Failed to encrypt SAML attribute.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToDecryptSamlAttribute">
            <summary>
            Failed to decrypt SAML attribute.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToEncryptId">
            <summary>
            Failed to encrypt ID.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToDecryptId">
            <summary>
            Failed to decrypt identifier.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.UnsupportedKeyEncryptionMethod">
            <summary>
            Unsupported key encryption method '{0}'.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToDecryptXml">
            <summary>
            Failed to decrypt XML.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.X509CertificateDoesNotContainAPrivateKey">
            <summary>
            The X.509 certificate doesn't contain a private key.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToEncryptXml">
            <summary>
            Failed to encrypt XML using X.509 certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.UnsupportedDataEncryptionMethod">
            <summary>
            Unsupported data encryption method: '{0}'.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.KeySizeDoesNotMatchTheKeyAlgorithm">
            <summary>
            The key size {0} doesn't match the key algorithm {1}.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.EncryptedDataDoesNotContainAnyEncryptedKeyInfo">
            <summary>
            The encrypted data doesn't contain any encrypted key info.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.NoDataEncryptionMethodHasBeenSpecified">
            <summary>
            No data encryption method has been specified.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.ArtifactEndPointIndexLengthIsInvalid">
            <summary>
            The artifact endpoint index length is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.SamlArtHiddenFieldIsMissing">
            <summary>
            Hidden field SAMLart is missing.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToReceiveArtifactInForm">
            <summary>
            Failed to receive artifact in form over HTTP Artifact.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.QueryStringIsMissingSamlArt">
            <summary>
            The query string is missing SAMLart.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.InvalidMessageHandleLength">
            <summary>
            The message handle length is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.Type4ArtifactIsTooShort">
            <summary>
            The type 4 artifact is too short.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.Type4ArtifactIsInvalid">
            <summary>
            The type 4 artifact is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToReceiveResponse">
            <summary>
            Failed to receive response.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendRequest">
            <summary>
            Failed to send request.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendResponse">
            <summary>
            Failed to send response.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.VariableIsMissing">
            <summary>
            Variable '{0}' is missing.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertSamlMessage">
            <summary>
            Failed to convert SAML message in posted form from base 64 encoded string.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendSamlMessage">
            <summary>
            Failed to send SAML message.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.NoSamlMessageFormVariable">
            <summary>
            No SAML message form variable in HTTP POST.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToReceiveRequest">
            <summary>
            Failed to receive request over HTTP POST.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToCreateHttpRedirectUrl">
            <summary>
            Failed to create HTTP Redirect URL.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertHttpRedirectEncodedMessage">
            <summary>
            Failed to convert HTTP redirect encoded message from base 64 encoded string.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToConvertHttpRedirectSignature">
            <summary>
            Failed to convert HTTP redirect signature from base 64 encoded string.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.NoSamlMessageQueryStringParameter">
            <summary>
            No SAML message query string parameter in HTTP Redirect.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToGetRequest">
            <summary>
            Failed to get request from HTTP Redirect URL.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToGetResponse">
            <summary>
            Failed to get response from HTTP Redirect URL.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.QueryStringIsMissing">
            <summary>
            The query string is missing '{0}'.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.MissingSignatureAlgorithm">
            <summary>
            The signature algorithm is missing.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.KeyTypeDoesNotMatchTheSignatureAlgorithm">
            <summary>
            The key type does not match the signature algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.SignatureAlgorithmIsNotSupported">
            <summary>
            The signature algorithm is not supported.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendReceiveRequestResponseOverSoap">
            <summary>
            Failed to send/receive SAML request/response over SOAP.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToReceiveId">
            <summary>
            Failed to receive identifier over URI.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToSendIdReceiveResponse">
            <summary>
            Failed to send identifier/receive response over URI.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.InvalidBinding">
            <summary>
            The binding is invalid: '{0}'.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.FailedToDeserializeAttributeValue">
            <summary>
            Failed to deserialize attribute value.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAudienceRestriction">
            <summary>
            The XML element is not an AudienceRestriction.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotANameIdFormat">
            <summary>
            The XML element is not a NameIDFormat.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAttributeProfile">
            <summary>
            The XML element is not an AttributeProfile.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnNameIdMappingService">
            <summary>
            The XML element is not a NameIdMappingService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnSingleSignOnService">
            <summary>
            The XML element is not a SingleSignOnService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnArtifactResolutionService">
            <summary>
            The XML element is not a ArtifactResolutionService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotASingleLogoutService">
            <summary>
            The XML element is not a SingleLogoutService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAManageNameIdService">
            <summary>
            The XML element is not a ManageNameIdService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAssertionConsumerService">
            <summary>
            The XML element is not a AssertionConsumerService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAServiceName">
            <summary>
            The XML element is not a ServiceName.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAServiceDescription">
            <summary>
            The XML element is not a ServiceDescription.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAttributeService">
            <summary>
            The XML element is not an AttributeService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthzService">
            <summary>
            The XML element is not an AuthzService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAuthnQueryService">
            <summary>
            The XML element is not an AuthnQueryService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.XmlIsNotAnAssertionIdRequestService">
            <summary>
            The XML element is not an AssertionIdRequestService.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.SamlObjectIsNotSigned">
            <summary>
            The SAML object is not signed.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SamlExceptionStatus.GeneralFailure">
            <summary>
            The operation cannot be completed.
            </summary>
        </member>
        <member name="T:ComponentPro.Saml.SamlException">
            <summary>
            Represents the exception that is thrown when a SAML error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.SamlException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Saml.SamlException"></see> class. </summary>
        </member>
        <member name="M:ComponentPro.Saml.SamlException.#ctor(ComponentPro.Saml.SamlExceptionStatus,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Saml.SamlException"></see> class with the specified error code.</summary>
            <param name="status">An <see cref="T:ComponentPro.Saml.SamlExceptionStatus"></see> value.</param>
            <param name="parameters"></param>
        </member>
        <member name="M:ComponentPro.Saml.SamlException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Saml.SamlException"></see> class with the specified error message.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
        </member>
        <member name="M:ComponentPro.Saml.SamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Saml.SamlException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes. </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that contains the information required to serialize the new <see cref="T:ComponentPro.Saml.SamlException"></see>. </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source and destination of the serialized stream associated with the new instance. </param>
        </member>
        <member name="M:ComponentPro.Saml.SamlException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Saml.SamlException"></see> class with the specified error message and inner exception.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:ComponentPro.Saml.SamlException.#ctor(System.Exception,ComponentPro.Saml.SamlExceptionStatus,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Saml.SamlException"></see> class with the specified error code and inner exception.</summary>
            <param name="innerException">The exception that is the cause of the current exception. </param>
            <param name="status">An <see cref="T:ComponentPro.Saml.SamlExceptionStatus"></see> value.</param>
            <param name="parameters">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:ComponentPro.Saml.SamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the _data needed to serialize the <see cref="T:ComponentPro.Saml.SamlException"></see>.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with _data. </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
        </member>
        <member name="P:ComponentPro.Saml.SamlException.Status">
            <summary>Gets the error code.</summary>
            <returns>An <see cref="T:ComponentPro.Saml.SamlExceptionStatus"></see> value that indicates the error that occurred.</returns>
        </member>
        <member name="T:ComponentPro.Saml.IAttributeValueParser">
            <summary>
            Defines generalized attribute value parser.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.IAttributeValueParser.Parse(System.Xml.XmlElement)">
            <summary>
            Parses the attribute value from XML. 
            </summary>
            <param name="parentElement">The parent element of the attribute value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:ComponentPro.Saml.IAttributeValueParser.ToXml(System.Xml.XmlDocument,System.Object)">
            <summary>
            Converts the attribute value to XML. 
            </summary>
            <param name="document">The XML document.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="T:ComponentPro.Saml.SimpleTextAttributeValueParser">
            <summary>
            Supports parsing string attribute values to XML.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.AttributeValue"/>
            <seealso cref="T:ComponentPro.Saml.AttributeValueParserFactory"/>
        </member>
        <member name="M:ComponentPro.Saml.SimpleTextAttributeValueParser.Parse(System.Xml.XmlElement)">
            <summary>
            Parses the attribute value from XML. 
            </summary>
            <param name="parentElement">The parent element of the attribute value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:ComponentPro.Saml.SimpleTextAttributeValueParser.ToXml(System.Xml.XmlDocument,System.Object)">
            <summary>
            Converts the attribute value to XML. 
            </summary>
            <param name="document">The XML document.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="T:ComponentPro.Saml.XmlAttributeValueParser">
            <summary>
            Supports parsing XML attribute values to XML.
            </summary>
            <seealso cref="T:ComponentPro.Saml1.AttributeValue"/>
            <seealso cref="T:ComponentPro.Saml.AttributeValueParserFactory"/>
        </member>
        <member name="M:ComponentPro.Saml.XmlAttributeValueParser.Parse(System.Xml.XmlElement)">
            <summary>
            Parses the attribute value from XML. 
            </summary>
            <param name="parentElement">The parent element of the attribute value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:ComponentPro.Saml.XmlAttributeValueParser.ToXml(System.Xml.XmlDocument,System.Object)">
            <summary>
            Converts the attribute value to XML. 
            </summary>
            <param name="document">The XML document.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="T:ComponentPro.Saml.AttributeValueParserFactory">
            <summary>
            This class supports parsing attribute value to XML element.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.AttributeValueParserFactory.GetAttributeValueParser(System.String,System.String)">
            <summary>
            Gets attribute value parser for the specified attribute name and <paramref name="attributeExtensionValue">attribute extension value</paramref>. In SAML 1.1, <paramref name="attributeExtensionValue">attribute extension value</paramref> is namespace. In SAML 2.0, <paramref name="attributeExtensionValue">attribute extension value</paramref> is name format.
            </summary>
            <param name="attributeExtensionValue">The attribute extension value. In SAML 1.1, <paramref name="attributeExtensionValue">attribute extension value</paramref> is namespace. In SAML 2.0, <paramref name="attributeExtensionValue">attribute extension value</paramref> is name format.</param>
            <param name="attributeName">The attribute name.</param>
            <returns>The attribute value parser.</returns>
        </member>
        <member name="M:ComponentPro.Saml.AttributeValueParserFactory.AddAttributeValueParser(System.String,System.String,ComponentPro.Saml.IAttributeValueParser)">
            <summary>
            Assigns a new attribute value parser for the specified attribute namespace and attribute name.
            </summary>
            <param name="attributeNamespace">The attribute namespace.</param>
            <param name="attributeName">The attribute name.</param>
            <param name="parser">The attribute value parser.</param>
        </member>
        <member name="M:ComponentPro.Saml.AttributeValueParserFactory.RemoveAttributeValueParser(System.String,System.String)">
            <summary>
            Unassigns the attribute value parser for the specified attribute namespace and attribute name.
            </summary>
            <param name="attributeNamespace">The attribute namespace.</param>
            <param name="attributeName">The attribute name.</param>
        </member>
        <member name="T:ComponentPro.Saml.Hex">
            <summary>
            Provides convenient methods to convert bytes to hex strings.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.Hex.GetBytes(System.String,System.Int32@)">
            <summary>
            Creates a byte array from the hexadecimal string. Each two characters are combined
            to create one byte. First two hexadecimal characters become first byte in returned array.
            Non-hexadecimal characters are ignored. 
            </summary>
            <param name="hexString">string to convert to byte array</param>
            <param name="discarded">number of characters in string ignored</param>
            <returns>byte array, in the same left-to-right order as the hexString</returns>
        </member>
        <member name="M:ComponentPro.Saml.Hex.ToString(System.Byte[])">
            <summary>
            Converts the specified array of bytes to a hex string.
            </summary>
            <param name="bytes">The array of bytes.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:ComponentPro.Saml.Hex.InHexFormat(System.String)">
            <summary>
            Determines if given string is in proper hexadecimal string format
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Saml.Hex.IsHexDigit(System.Char)">
            <summary>
            Returns true is c is a hexadecimal digit (A-F, a-f, 0-9)
            </summary>
            <param name="c">Character to test</param>
            <returns>true if hex digit, false if not</returns>
        </member>
        <member name="T:ComponentPro.Saml.ISamlIdentifierGenerator">
            <summary>
            Defines generalized SAML ID generator.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.ISamlIdentifierGenerator.Generate">
            <summary>
            Generates a random SAML ID.
            </summary>
            <returns>The randomly generated SAML ID.</returns>
        </member>
        <member name="M:ComponentPro.Saml.ISamlIdentifierGenerator.Generate(System.Int32)">
            <summary>
            Generates a random SAML ID with the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns>The randomly generated SAML ID.</returns>
        </member>
        <member name="T:ComponentPro.Saml.RandomIdentifierGenerator">
            <summary>
            Represents random SAML ID generator.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.RandomIdentifierGenerator.Generate">
            <summary>
            Generates a random SAML ID.
            </summary>
            <returns>The randomly generated SAML ID.</returns>
        </member>
        <member name="M:ComponentPro.Saml.RandomIdentifierGenerator.Generate(System.Int32)">
            <summary>
            Generates a random SAML ID with the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns>The randomly generated SAML ID.</returns>
        </member>
        <member name="T:ComponentPro.Saml.CreateElementEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Saml.SamlObject.CreateElement">CreateElement</see> event.
            </summary>
            <param name="doc">The XML document to create an element with the specified <see cref="P:System.Xml.XmlNode.Prefix">Prefix</see>, 
            <see cref="P:System.Xml.XmlDocument.LocalName">LocalName</see>, and <see cref="P:System.Xml.XmlNode.NamespaceURI">NamespaceURI</see>.</param>
            <param name="prefix">The prefix of the new element (if any). String.Empty and null are equivalent.</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any). String.Empty and null are equivalent.</param>
            <param name="cancel"><c>true</c> to ignore the default value; otherwise is <c>false</c>.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> if <paramref name="cancel"/> is <c>true</c>; otherwise null to use the default value.</returns>
        </member>
        <member name="T:ComponentPro.Saml.AppendChildEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Saml.SamlObject.SetAttribute">SetAttribute</see> event.
            </summary>
            <param name="xmlParent">The XML element to add the specified node to the end of the list of child nodes, of this node.</param>
            <param name="newChild">The node to add. All the contents of the node to be added are moved into the specified location.</param>
            <param name="cancel"><c>true</c> to ignore the default <b>AppendChild</b> operation; otherwise is <c>false</c>.</param>
            <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild"/> node.
            The <paramref name="newChild"/> is an ancestor of this node.</exception>
            <exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.This node is read-only.</exception>
        </member>
        <member name="T:ComponentPro.Saml.SetAttributeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Saml.SamlObject.SetAttribute">SetAttribute</see> event.
            </summary>
            <param name="element">The XML element to set the value of the attribute with the specified name.</param>
            <param name="attrName">The name of the attribute to create or alter. 
            This is a qualified name. 
            If the name contains a colon it is parsed into prefix and local name components.</param>
            <param name="attrValue">The value to set for the attribute.</param>
            <param name="cancel"><c>true</c> to ignore the default value; otherwise is <c>false</c>.</param>
            <exception cref="T:System.Xml.XmlException">The specified name contains an invalid character.</exception>
            <exception cref="T:System.ArgumentException">The node is read-only.</exception>
        </member>
        <member name="T:ComponentPro.Saml.SecureIdentifierGenerator">
            <summary>
            Represents secure random SAML ID generator.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.SecureIdentifierGenerator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml.SecureIdentifierGenerator"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:ComponentPro.Saml.SecureIdentifierGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Saml.SecureIdentifierGenerator"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Saml.SecureIdentifierGenerator.Generate">
            <summary>
            Generates a random SAML ID.
            </summary>
            <returns>The randomly generated SAML ID.</returns>
        </member>
        <member name="M:ComponentPro.Saml.SecureIdentifierGenerator.Generate(System.Int32)">
            <summary>
            Generates a random SAML ID with the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns>The randomly generated SAML ID.</returns>
        </member>
        <member name="T:ComponentPro.Saml.SoapVersion">
            <summary>
            SOAP Version.
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SoapVersion.Soapv11">
            <summary>
            Represents the SOAP v1.1
            </summary>
        </member>
        <member name="F:ComponentPro.Saml.SoapVersion.Soapv12">
            <summary>
            Represents the SOAP v1.2
            </summary>
        </member>
    </members>
</doc>
